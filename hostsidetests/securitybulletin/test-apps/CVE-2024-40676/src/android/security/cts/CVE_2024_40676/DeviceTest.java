/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2024_40676;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.accounts.ChooseTypeAndAccountActivity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Build;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.lang.reflect.InvocationTargetException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testPocCVE_2024_40676() {
        try {
            // Register broadcast receiver to to get exceptions from 'AddAccount()' while creating
            // key intent
            final Context context = getApplicationContext();
            final int broadcastReceiverFlags =
                    Build.VERSION.SDK_INT >= 33 /* TIRAMISU */
                            ? (int) Context.class.getField("RECEIVER_EXPORTED").get(context)
                            : 0;
            CompletableFuture<Exception> accountServiceException = new CompletableFuture<>();
            Semaphore pocContentActivityBroadcastReceived = new Semaphore(0);
            IntentFilter intentFilter =
                    new IntentFilter(context.getString(R.string.broadcastAction));
            intentFilter.addAction(context.getString(R.string.pocContentActivityBroadcast));
            context.registerReceiver(
                    new BroadcastReceiver() {
                        @Override
                        public void onReceive(Context context, Intent intent) {
                            try {
                                String action = intent.getAction();
                                if (action.equals(
                                        context.getString(R.string.pocContentActivityBroadcast))) {
                                    pocContentActivityBroadcastReceived.release();
                                } else {
                                    accountServiceException.complete(
                                            (Exception)
                                                    getSerializableExtra(
                                                            intent,
                                                            context.getString(
                                                                    R.string
                                                                            .accountServiceException),
                                                            Exception.class));
                                }
                            } catch (Exception e) {
                                // Ignore unintended exceptions
                            }
                        }
                    },
                    intentFilter,
                    broadcastReceiverFlags);

            // Launch 'ChooseTypeAndAccountActivity' to reproduce vulnerability
            context.startActivity(
                    new Intent()
                            .setClassName("android", ChooseTypeAndAccountActivity.class.getName())
                            .putExtra(
                                    ChooseTypeAndAccountActivity
                                            .EXTRA_ALLOWABLE_ACCOUNT_TYPES_STRING_ARRAY,
                                    new String[] {context.getString(R.string.accountAuthType)})
                            .setFlags(
                                    Intent.FLAG_ACTIVITY_NEW_TASK
                                            | Intent.FLAG_ACTIVITY_CLEAR_TASK));

            // Wait for any exceptions from 'AccountService'
            // Broadcast is received in ~100 milliseconds, with and without fix.
            // Keeping 10 seconds for slow devices.
            assume().that(accountServiceException.get(10_000 /* timeout */, TimeUnit.MILLISECONDS))
                    .isNull();

            // Fail the test if 'PocContentActivity' gets launched
            // Wait for broadcast from 'PocContentActivity'
            // Without fix, broadcast is received in ~300 milliseconds.
            // With fix, broadcast is not received
            // Keeping 10 seconds for slow devices
            assertWithMessage(
                            "Device is vulnerable to b/349780950!!! A malicious app can install"
                                    + " unknown packages without permissions")
                    .that(
                            pocContentActivityBroadcastReceived.tryAcquire(
                                    10_000 /* timeout */, TimeUnit.MILLISECONDS))
                    .isFalse();
        } catch (Exception e) {
            assume().that(e).isNull();
        }
    }

    private Object getSerializableExtra(Intent intent, String key, Class valueClass)
            throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
        // The 'getSerializableExtra' method is deprecated on Android-13 and above
        if (Build.VERSION.SDK_INT >= 33 /* TIRAMISU */) {
            return Intent.class
                    .getDeclaredMethod("getSerializableExtra", String.class, Class.class)
                    .invoke(intent, key, valueClass);
        }
        return intent.getSerializableExtra(key);
    }
}
