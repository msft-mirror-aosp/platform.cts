/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2024_31312;

import static android.provider.Settings.Global.SHOW_MEDIA_ON_QUICK_SETTINGS;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static com.android.sts.common.SystemUtil.poll;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.app.Instrumentation;
import android.app.KeyguardManager;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.content.Context;
import android.graphics.drawable.Icon;
import android.media.MediaMetadata;
import android.media.session.MediaSession;
import android.service.notification.StatusBarNotification;
import android.view.KeyEvent;

import androidx.test.runner.AndroidJUnit4;
import androidx.test.uiautomator.By;
import androidx.test.uiautomator.UiDevice;
import androidx.test.uiautomator.UiObject2;
import androidx.test.uiautomator.Until;

import com.android.sts.common.LockSettingsUtil;

import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    @Test
    public void testPocCVE_2024_31312() {
        try {
            Instrumentation instrumentation = getInstrumentation();
            Context context = instrumentation.getContext();

            // Create a MediaSession
            MediaSession session =
                    new MediaSession(context, "cve_2024_31312_session" /* session name */);

            // Create a MediaMetadata object, pass an empty 'METADATA_KEY_TITLE' and set metadata
            // for session
            String artistName = "cve_2024_31312_session_testArtist";
            session.setMetadata(
                    new MediaMetadata.Builder()
                            .putString(MediaMetadata.METADATA_KEY_TITLE, "")
                            .putString(MediaMetadata.METADATA_KEY_ARTIST, artistName)
                            .build());

            // Create notificationManager
            NotificationManager notificationManager =
                    context.getSystemService(NotificationManager.class);

            // Create notificationChannel
            final String channelId = "cve_2024_31312_channel_id";
            notificationManager.createNotificationChannel(
                    new NotificationChannel(
                            channelId,
                            "cve_2024_31312_channel_name" /* notification channel name */,
                            NotificationManager.IMPORTANCE_DEFAULT));

            try (AutoCloseable withLockScreenCloseable =
                    new LockSettingsUtil(context).withLockScreen()) {
                // Sleep and wakeup the device to lock it
                UiDevice device = UiDevice.getInstance(instrumentation);
                device.pressKeyCode(KeyEvent.KEYCODE_SLEEP);
                device.pressKeyCode(KeyEvent.KEYCODE_WAKEUP);

                // Check if device is locked
                KeyguardManager keyguardManager = context.getSystemService(KeyguardManager.class);
                assume().withMessage("Device is not locked")
                        .that(keyguardManager.isDeviceLocked())
                        .isTrue();

                // Post media style notification
                notificationManager.notify(
                        0 /* notification id */,
                        new Notification.Builder(context)
                                .setChannelId(channelId)
                                .setStyle(
                                        new Notification.DecoratedMediaCustomViewStyle()
                                                .setMediaSession(session.getSessionToken()))
                                .setSmallIcon(
                                        Icon.createWithData(
                                                new byte[0] /* data */,
                                                0 /* offset */,
                                                0 /* length */))
                                .build());

                // Check if notification gets posted or not
                assume().withMessage("Notification was not posted")
                        .that(
                                poll(
                                        () -> {
                                            StatusBarNotification[] activeNotifications =
                                                    notificationManager.getActiveNotifications();
                                            for (StatusBarNotification notification :
                                                    activeNotifications) {
                                                if (notification
                                                        .getPackageName()
                                                        .equals(context.getPackageName())) {
                                                    return true;
                                                }
                                            }
                                            return false;
                                        }))
                        .isTrue();

                // Launch settings shade
                UiDevice uiDevice = UiDevice.getInstance(instrumentation);
                assume().withMessage("Unable to launch settings shade")
                        .that(uiDevice.openQuickSettings())
                        .isTrue();

                // Wait for 'qs_media_controls' resource id to appear
                UiObject2 resIdObj =
                        uiDevice.wait(
                                Until.findObject(
                                        By.res(
                                                "com.android.systemui",
                                                SHOW_MEDIA_ON_QUICK_SETTINGS)),
                                3000 /* timeout */);

                // Fail the test if media player is visisble on lockscreen notification shade
                assertWithMessage(
                                "Device is vulnerable to b/314333719!, hence after Disabling show"
                                        + " media on lock screen, media is still accessible via"
                                        + " pull down notification")
                        .that(
                                resIdObj != null
                                        && resIdObj.getContentDescription().contains(artistName))
                        .isFalse();
            }
        } catch (Exception e) {
            assume().that(e).isNull();
        }
    }
}
