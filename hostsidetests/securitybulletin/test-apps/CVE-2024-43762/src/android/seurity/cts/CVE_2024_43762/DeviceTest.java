/*
 * Copyright (C) 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2024_43762;

import static android.Manifest.permission.MANAGE_ROLE_HOLDERS;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static com.android.compatibility.common.util.SystemUtil.runWithShellPermissionIdentity;
import static com.android.sts.common.SystemUtil.poll;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.app.ActivityManager;
import android.app.Instrumentation;
import android.app.role.RoleManager;
import android.appwidget.AppWidgetManager;
import android.content.ComponentName;
import android.content.Context;
import android.content.pm.PackageManager;
import android.content.res.Resources;

import androidx.test.runner.AndroidJUnit4;
import androidx.test.uiautomator.By;
import androidx.test.uiautomator.BySelector;
import androidx.test.uiautomator.UiDevice;
import androidx.test.uiautomator.UiObject2;
import androidx.test.uiautomator.Until;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.List;
import java.util.regex.Pattern;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testPocCVE_2024_43762() {
        try {
            // Pin the widget on home screen
            final Instrumentation instrumentation = getInstrumentation();
            final Context context = instrumentation.getContext();
            AppWidgetManager appWidgetManager = context.getSystemService(AppWidgetManager.class);
            appWidgetManager.requestPinAppWidget(
                    new ComponentName(context, PocReceiver.class) /* provider */,
                    null /* extras */,
                    null /* successCallback */);

            // Fetch "Add to Home screen" button text
            final PackageManager packageManager = context.getPackageManager();
            String launhcherPackageName = getLauncherPackage(context, packageManager);
            final Resources launcherResources =
                    packageManager.getResourcesForApplication(launhcherPackageName);
            final String addToHomeScreen =
                    launcherResources.getString(
                            launcherResources.getIdentifier(
                                    "add_to_home_screen", "string", launhcherPackageName));
            assume().withMessage("Add to Home screen button text is empty")
                    .that(addToHomeScreen.trim())
                    .isNotEmpty();

            // Click on "Add to Home screen" button
            assume().withMessage("Add to Home screen button not found")
                    .that(
                            findUiObject(
                                    UiDevice.getInstance(instrumentation),
                                    By.text(
                                            Pattern.compile(
                                                    addToHomeScreen, Pattern.CASE_INSENSITIVE)),
                                    true /* clickRequired */))
                    .isTrue();

            // Wait for the 'PocRemoteViewsService' to start
            String pocRemoteViewsService = PocRemoteViewsService.class.getName();
            assume().withMessage("PocRemoteViewsService has not started")
                    .that(poll(() -> (isServiceRunning(context, pocRemoteViewsService))))
                    .isTrue();

            // Fail the test if 'PocRemoteViewsService' does not unbind
            assertWithMessage(
                            "Device is vulnerable to b/340239088, there is a possible way to avoid"
                                    + " unbinding of a service from the system  ")
                    .that(poll(() -> (!isServiceRunning(context, pocRemoteViewsService))))
                    .isTrue();
        } catch (Exception e) {
            assume().that(e).isNull();
        }
    }

    private boolean findUiObject(UiDevice uiDevice, BySelector selector, boolean clickRequired)
            throws Exception {
        final UiObject2 uiobject = uiDevice.wait(Until.findObject(selector), 5000 /* timeout */);
        if (clickRequired && (uiobject != null)) {
            poll(() -> (uiobject.isEnabled()));
            uiobject.click();
        }
        return (uiobject != null);
    }

    public static boolean isServiceRunning(Context context, String serviceClassName) {
        // Get the ActivityManager
        ActivityManager activityManager = context.getSystemService(ActivityManager.class);

        // Get the list of running services
        if (activityManager != null) {
            for (ActivityManager.RunningServiceInfo serviceInfo :
                    activityManager.getRunningServices(Integer.MAX_VALUE)) {
                // Check if the service's class name matches the input class name
                if (serviceInfo.service.getClassName().equals(serviceClassName)) {
                    return true;
                }
            }
        }
        return false;
    }

    public static String getLauncherPackage(Context context, PackageManager packageManager) {
        RoleManager roleManager = context.getSystemService(RoleManager.class);
        List<String> packages =
                runWithShellPermissionIdentity(
                        () -> {
                            return roleManager.getRoleHolders(RoleManager.ROLE_HOME);
                        },
                        MANAGE_ROLE_HOLDERS);
        return packages.get(0);
    }
}
