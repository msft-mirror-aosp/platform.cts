/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_21351_testApp;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;

import static com.android.compatibility.common.util.SystemUtil.runShellCommand;
import static com.android.sts.common.DumpsysUtils.isActivityVisible;
import static com.android.sts.common.SystemUtil.poll;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Build;
import android.provider.Settings;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    Context mContext;

    @Test
    public void testPocCVE_2023_21351() {
        try {
            // Register a receiver to receive any update from other app components.
            // Using the flag 'RECEIVER_EXPORTED' for API level 33 and above since it's
            // required for API 34 and above and available only from API level 33 onwards
            // and 0 otherwise.
            mContext = getApplicationContext();
            final int requiredFlag =
                    Build.VERSION.SDK_INT >= 33 /* TIRAMISU */
                            ? (int)
                                    Context.class
                                            .getField(mContext.getString(R.string.receiverExported))
                                            .get(mContext)
                            : 0;

            // Register broadcast receiver to receive broadcast from helper-app
            final CompletableFuture<Exception> waitOnPocActivityPaused =
                    new CompletableFuture<Exception>();
            final CompletableFuture<Exception> waitOnPocActivityResumed =
                    new CompletableFuture<Exception>();
            final CompletableFuture<Exception> waitOnPocServiceCreate =
                    new CompletableFuture<Exception>();
            final Semaphore waitOnPocBackgroundActivity = new Semaphore(0);
            mContext.registerReceiver(
                    new BroadcastReceiver() {
                        @Override
                        public void onReceive(Context context, Intent intent) {
                            try {
                                if (intent.hasExtra(
                                        context.getString(R.string.pocActivityPaused))) {
                                    waitOnPocActivityPaused.complete(getException(intent));
                                }
                                if (intent.hasExtra(
                                        context.getString(R.string.pocActivityResumed))) {
                                    waitOnPocActivityResumed.complete(getException(intent));
                                }
                                if (intent.hasExtra(context.getString(R.string.pocServiceCreate))) {
                                    waitOnPocServiceCreate.complete(getException(intent));
                                }
                                if (intent.hasExtra(
                                        context.getString(R.string.pocBackgroundActivity))) {
                                    waitOnPocBackgroundActivity.release();
                                }
                            } catch (Exception ignore) {
                                // Ignore unintented exceptions
                            }
                        }
                    } /* receiver */,
                    new IntentFilter(mContext.getString(R.string.broadcastAction)) /* filter */,
                    requiredFlag /* flags */);

            // Launch 'PocActivity' to reproduce the vulnerability
            mContext.startActivity(
                    new Intent()
                            .setClassName(
                                    mContext.getString(R.string.helperAppPackageName),
                                    mContext.getString(R.string.pocActivity))
                            .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));

            // Wait for broadcast from 'onResume()' of 'PocActivity'
            final long timeout = 10_000L;
            assume().withMessage(
                            mContext.getString(R.string.exceptionMessagePocActivity, "onResume()"))
                    .that(waitOnPocActivityResumed.get(timeout, TimeUnit.MILLISECONDS))
                    .isNull();

            // Press 'Home' to put 'PocActivity' in background.
            runShellCommand(mContext.getString(R.string.homeKeyEvent));

            // Launch 'settingsActivity' to reproduce the vulnerability
            Intent intent =
                    new Intent(Settings.ACTION_SETTINGS).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            mContext.startActivity(intent);

            // Wait for 'Settings' activity to launch.
            assume().withMessage(mContext.getString(R.string.assumptionFailureMessage))
                    .that(
                            poll(
                                    () ->
                                            isActivityVisible(
                                                    intent.resolveActivity(
                                                                    mContext.getPackageManager())
                                                            .flattenToString())))
                    .isTrue();

            // Wait for broadcast from 'onPause()' of 'PocActivity'
            assume().withMessage(
                            mContext.getString(R.string.exceptionMessagePocActivity, "onPause()"))
                    .that(waitOnPocActivityPaused.get(timeout, TimeUnit.MILLISECONDS))
                    .isNull();

            // Wait for broadcast from 'onCreate()' of 'PocService'
            assume().withMessage(mContext.getString(R.string.exceptionMessagePocService))
                    .that(waitOnPocServiceCreate.get(timeout * 2, TimeUnit.MILLISECONDS))
                    .isNull();

            // Without fix, due to logical error 'PocBackgroundActivity' is launched
            // The activity is launched in ~1 seconds, keeping 10 seconds considering
            // slow execution on some devices
            assertWithMessage(mContext.getString(R.string.testFailureMessage))
                    .that(waitOnPocBackgroundActivity.tryAcquire(timeout, TimeUnit.MILLISECONDS))
                    .isFalse();
        } catch (Exception e) {
            assume().that(e).isNull();
        }
    }

    private Exception getException(Intent intent) throws Exception {
        return (Exception)
                getSerializableExtra(
                        intent, mContext.getString(R.string.pocException), Exception.class);
    }

    private Object getSerializableExtra(Intent intent, String key, Class valueClass)
            throws Exception {
        if (Build.VERSION.SDK_INT >= 33 /* TIRAMISU */) {
            return Intent.class
                    .getDeclaredMethod(
                            mContext.getString(R.string.getSerializableExtra),
                            String.class,
                            Class.class)
                    .invoke(intent, key, valueClass);
        }
        return Intent.class
                .getDeclaredMethod(mContext.getString(R.string.getSerializableExtra), String.class)
                .invoke(intent, key);
    }
}
