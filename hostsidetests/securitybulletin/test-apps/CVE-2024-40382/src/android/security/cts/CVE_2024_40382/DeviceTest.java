/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2024_40382;

import static android.Manifest.permission.CREATE_USERS;
import static android.os.UserHandle.USER_NULL;
import static android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;

import static com.android.compatibility.common.util.SystemUtil.runShellCommand;
import static com.android.compatibility.common.util.SystemUtil.runWithShellPermissionIdentity;
import static com.android.sts.common.SystemUtil.poll;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.app.Activity;
import android.content.ComponentName;
import android.content.ContentProvider;
import android.content.Context;
import android.content.ContextWrapper;
import android.content.Intent;
import android.content.pm.UserInfo;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Looper;
import android.os.UserManager;
import android.provider.Settings;
import android.util.Log;
import android.widget.ImageView;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testPocCVE_2024_40382() {
        try {
            // Check if the device supports multiple users or not
            final Context context = getApplicationContext();
            final UserManager userManager = context.getSystemService(UserManager.class);
            assume().withMessage("This device does not support multiple users")
                    .that(userManager.supportsMultipleUsers())
                    .isTrue();

            // Retrieve 'Settings' package name
            final ComponentName componentName =
                    new Intent(Settings.ACTION_SETTINGS)
                            .resolveActivity(context.getPackageManager());
            final String settingsPackageName =
                    componentName != null ? componentName.getPackageName() : "com.android.settings";

            // Get the context of package
            final Context settingsPackageContext =
                    context.createPackageContext(
                            settingsPackageName,
                            Context.CONTEXT_IGNORE_SECURITY | Context.CONTEXT_INCLUDE_CODE);

            // Fetch the class 'EditUserPhotoController'
            final ClassLoader settingsClassLoader = settingsPackageContext.getClassLoader();
            final Class editUserPhotoControllerClass =
                    settingsClassLoader.loadClass(
                            "com.android.settingslib.users.EditUserPhotoController");
            final Class activityStarterClass =
                    settingsClassLoader.loadClass("com.android.settingslib.users.ActivityStarter");

            // Fetch the constructor of 'EditUserPhotoController'
            final Constructor editUserPhotoControllerClassConstructor =
                    editUserPhotoControllerClass.getDeclaredConstructor(
                            Activity.class,
                            activityStarterClass,
                            ImageView.class,
                            Bitmap.class,
                            boolean.class,
                            String.class);
            editUserPhotoControllerClassConstructor.setAccessible(true);

            // Create an instance of Activity and set its 'mBase' to 'settingsPackageContext'
            // The Activity constructor requires Looper.prepare() to be called
            Looper.prepare();
            final Activity activity = new Activity();
            final Field mBaseField = ContextWrapper.class.getDeclaredField("mBase");
            mBaseField.setAccessible(true);
            mBaseField.set(activity, settingsPackageContext);

            // Create the object of 'EditUserPhotoController' class
            final Object editUserPhotoController =
                    editUserPhotoControllerClassConstructor.newInstance(
                            activity,
                            null /* activityStarter */,
                            new ImageView(settingsPackageContext),
                            null /* bitmap */,
                            true /* waiting */,
                            "com.android.settings.files" /* fileAuthority */);

            // Get the user id of "cve_2024_40382_user"
            final int userId =
                    runWithShellPermissionIdentity(
                            () -> {
                                List<UserInfo> list = userManager.getUsers();
                                for (UserInfo info : list) {
                                    if (info.toString().contains("cve_2024_40382_user")) {
                                        return info.getUserHandle().getIdentifier();
                                    }
                                }
                                return USER_NULL;
                            },
                            CREATE_USERS);
            assume().withMessage("Unable to find the user cve_2024_40382_user")
                    .that(userId)
                    .isNotEqualTo(USER_NULL);

            // Get URI of cve_2024_40382_user's image
            final String imageId = fetchImageIdFromSecondaryUser(userId);
            final String targetImageUri =
                    String.format(
                            "%s/%s",
                            ContentProvider.maybeAddUserId(EXTERNAL_CONTENT_URI, userId), imageId);

            // Without Fix, 'onActivityResult()' returns true as calling package is null and
            // With fix, 'onActivityResult()' returns false as the URI image belongs to
            // secondary user
            final Method onActivityResultMethod =
                    editUserPhotoControllerClass.getDeclaredMethod(
                            "onActivityResult", int.class, int.class, Intent.class);
            final boolean activityResult =
                    (boolean)
                            onActivityResultMethod.invoke(
                                    editUserPhotoController,
                                    1003 /* REQUEST_CODE_CROP_PHOTO */,
                                    Activity.RESULT_OK,
                                    new Intent("cve_2024_40382_action")
                                            .setData(Uri.parse(targetImageUri)));
            assertWithMessage(
                            "Device is vulnerable to b/296915959 hence image can be revealed"
                                    + " across users via"
                                    + " com.android.settingslib.users.EditUserPhotoController")
                    .that(activityResult)
                    .isFalse();
        } catch (Exception e) {
            assume().that(e).isNull();
        }
    }

    private String fetchImageIdFromSecondaryUser(int userId) throws Exception {
        // Fetch the image-id of the captured screenshot image
        final Pattern pattern = Pattern.compile("_id=(?<imageId>[0-9]+)", Pattern.CASE_INSENSITIVE);
        final String imageInfoFetchingCommand =
                String.format(
                        "content query --user %d --uri %s --projection _id",
                        userId, EXTERNAL_CONTENT_URI);
        final CompletableFuture<String> imageId = new CompletableFuture<>();
        assume().withMessage("Failed to fetch imageId from secondary user")
                .that(
                        poll(
                                () -> {
                                    try {
                                        Matcher matcher =
                                                pattern.matcher(
                                                        runShellCommand(imageInfoFetchingCommand));
                                        if (matcher.find()) {
                                            imageId.complete(matcher.group("imageId"));
                                            return true;
                                        }
                                    } catch (Exception e) {
                                        Log.i(
                                                "CVE-2024-40382",
                                                "Got an exception while fetching the imageId : "
                                                        + e);
                                    }
                                    return false;
                                }))
                .isTrue();
        return imageId.getNow(null /* default imageId */);
    }
}
