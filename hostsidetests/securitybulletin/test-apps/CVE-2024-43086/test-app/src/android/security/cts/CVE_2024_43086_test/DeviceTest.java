/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2024_43086_test;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.accounts.Account;
import android.accounts.AccountManager;
import android.content.Context;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testPocCVE_2024_43086() {
        try {
            final Context context = getApplicationContext();
            final AccountManager accountManager = context.getSystemService(AccountManager.class);
            for (Account account : accountManager.getAccounts()) {
                if (context.getString(R.string.accountName).equals(account.name)
                        && context.getString(R.string.accountType).equals(account.type)) {
                    // Without fix, 'AccountAuthenticator' data is not deleted
                    // after updating the helper-app
                    assertWithMessage(
                                    "This device is vulnerable to b/343440463 !! Account password"
                                            + " not deleted after authenticator is deleted and can"
                                            + " leak into any app")
                            .that(accountManager.getPassword(account))
                            .isNotEqualTo(context.getString(R.string.accountPassword));
                }
            }
        } catch (Exception e) {
            assume().that(e).isNull();
        }
    }
}
