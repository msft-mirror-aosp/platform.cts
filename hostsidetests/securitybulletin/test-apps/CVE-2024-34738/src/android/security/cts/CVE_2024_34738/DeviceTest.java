/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2024_34738;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.app.AppOpsManager;
import android.content.Context;
import android.os.Process;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.List;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testPocCVE_2024_34738() {
        try {
            Context context = getApplicationContext();
            AppOpsManager appOps = context.getSystemService(AppOpsManager.class);
            List pkgOpsList =
                    (List)
                            AppOpsManager.class
                                    .getDeclaredMethod(
                                            "getOpsForPackage",
                                            Integer.TYPE,
                                            String.class,
                                            (new String[0]).getClass())
                                    .invoke(
                                            appOps,
                                            Process.myUid(),
                                            context.getPackageName(),
                                            null);
            assume().withMessage("getOpsForPackage() returned null").that(pkgOpsList).isNotNull();
            for (Object pkgOps : pkgOpsList) {
                List opsList = (List) pkgOps.getClass().getDeclaredMethod("getOps").invoke(pkgOps);
                assume().withMessage("getOps() returned null").that(opsList).isNotNull();
                for (Object ops : opsList) {
                    String opStr =
                            (String) ops.getClass().getDeclaredMethod("getOpStr").invoke(ops);

                    // An unprivileged app should not have access to the
                    // 'ACCESS_RESTRICTED_SETTINGS' app op mode
                    // Without fix, 'ACCESS_RESTRICTED_SETTINGS' app op mode is accessible and the
                    // test fails
                    assertWithMessage("Vulnerable to b/336323279!!")
                            .that(opStr.contains("access_restricted_settings"))
                            .isFalse();
                }
            }
        } catch (Exception e) {
            assume().that(e).isNull();
        }
    }
}
