/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_40109;

import static android.app.ComponentOptions.KEY_PENDING_INTENT_BACKGROUND_ACTIVITY_ALLOWED;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.graphics.drawable.Icon;
import android.hardware.usb.UsbConfiguration;
import android.os.Bundle;
import android.os.Parcel;

import androidx.test.runner.AndroidJUnit4;

import java.util.Locale;

import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testPocCVE_2023_40109() {
        try {
            final Context context = getApplicationContext();

            // Create pendingIntent
            final Bundle bundle = new Bundle();
            bundle.putBoolean(KEY_PENDING_INTENT_BACKGROUND_ACTIVITY_ALLOWED, true);
            final PendingIntent pi =
                    PendingIntent.getActivity(
                            context,
                            0 /* requestCode */,
                            new Intent(),
                            PendingIntent.FLAG_IMMUTABLE,
                            bundle);

            // Create NotificationChannel
            NotificationManager notificationManager =
                    context.getSystemService(NotificationManager.class);
            final String channelId = "cve_2023_40109_channelId";
            notificationManager.createNotificationChannel(
                    new NotificationChannel(
                            channelId,
                            "cve_2023_40109_channelName",
                            NotificationManager.IMPORTANCE_HIGH));

            // Create Notification
            final Notification notification =
                    new Notification.Builder(context, channelId)
                            .setSmallIcon(
                                    Icon.createWithData(
                                            new byte[0] /* data */, 0 /* offset */, 0 /* length */))
                            .setContentIntent(pi)
                            .build();

            // Set 'mInterfaces' field
            Notification[] notificationArray = {notification};
            final UsbConfiguration config =
                    new UsbConfiguration(
                            0 /* id */,
                            "cve_2023_40109_name" /* name */,
                            0 /* attributes */,
                            0 /* max power */);
            config.setInterfaces(notificationArray);

            // Create a Parcel object to invoke the vulnerable function reliably
            final Parcel parcel = Parcel.obtain();
            config.writeToParcel(parcel, 0 /* flags */);
            parcel.setDataPosition(0);

            // Invoke the vulnerable function 'UsbConfiguration::createFromParcel()' and check if
            // any 'RuntimeException' is caught
            try {
                config.CREATOR.createFromParcel(parcel);
            } catch (RuntimeException exception) {
                if (exception
                        .getLocalizedMessage()
                        .toLowerCase(Locale.ROOT)
                        .contains("android.hardware.usb.usbinterface")) {
                    // Ignore exception thrown with fix and exit the test
                    return;
                } else {
                    throw exception;
                }
            }

            // Fail the test if exception does not occur
            assertWithMessage("Device is vulnerable to b/291299076").fail();
        } catch (Exception e) {
            assume().that(e).isNull();
        }
    }
}
