/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2024_23707;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static com.android.compatibility.common.util.SystemUtil.runShellCommand;
import static com.android.sts.common.SystemUtil.poll;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.app.Instrumentation;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.provider.Settings;

import androidx.test.runner.AndroidJUnit4;
import androidx.test.uiautomator.By;
import androidx.test.uiautomator.BySelector;
import androidx.test.uiautomator.UiDevice;
import androidx.test.uiautomator.UiObject2;
import androidx.test.uiautomator.Until;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testPocCVE_2024_23707() {
        try {
            final Instrumentation instrumentation = getInstrumentation();
            final Context context = instrumentation.getContext();

            // Have something in storage so that Settings app won't disable "Clear storage" button
            context.getSharedPreferences(context.getPackageName(), Context.MODE_PRIVATE)
                    .edit()
                    .putInt("cve_2024_23707_integer", 1)
                    .commit();

            // Launch Appinfo Activity
            context.startActivity(
                    new Intent(
                                    Settings.ACTION_APPLICATION_DETAILS_SETTINGS,
                                    Uri.fromParts("package", context.getPackageName(), null))
                            .addFlags(
                                    Intent.FLAG_ACTIVITY_NEW_TASK
                                            | Intent.FLAG_ACTIVITY_CLEAR_TASK));

            // Click on "Storage & cache"
            UiDevice uiDevice = UiDevice.getInstance(instrumentation);
            assume().withMessage("Storage & cache option not found")
                    .that(
                            clickUiObject(
                                    uiDevice,
                                    By.text(
                                            Pattern.compile(
                                                    "Storage & cache", Pattern.CASE_INSENSITIVE))))
                    .isTrue();

            // Click on "CLEAR STORAGE" it will make settings activity to launch
            // PocManageSpaceActivity
            assume().withMessage("CLEAR STORAGE option not found")
                    .that(
                            clickUiObject(
                                    uiDevice,
                                    By.text(
                                            Pattern.compile(
                                                    "CLEAR STORAGE", Pattern.CASE_INSENSITIVE))))
                    .isTrue();

            // Fail the test if PlatLogoActivity got launched
            assertWithMessage(
                            "Device is Vulnerable to 316891059, hence any malicious app can launch"
                                    + " arbitrary fragment with arbitrary arguments within Settings"
                                    + " app!")
                    .that(checkActivityLaunched("PlatLogoActivity"))
                    .isFalse();

        } catch (Exception e) {
            assume().that(e).isNull();
        }
    }

    private boolean clickUiObject(UiDevice uiDevice, BySelector selector) throws Exception {
        boolean objectFound = uiDevice.wait(Until.hasObject(selector), 5000 /* timeout */);
        if (objectFound) {
            UiObject2 uiobject = uiDevice.findObject(selector);
            poll(() -> (uiobject.isEnabled()));
            uiobject.click();
        }
        return objectFound;
    }

    private boolean checkActivityLaunched(String activityName) throws Exception {
        final Pattern resumedPattern =
                Pattern.compile("mResumed=(?<value>(true|false))", Pattern.CASE_INSENSITIVE);
        return poll(
                () -> {
                    String dumpsys =
                            runShellCommand(String.format("dumpsys activity " + activityName));
                    Matcher matcher = resumedPattern.matcher(dumpsys);
                    if (matcher.find() && matcher.group("value").equals("true")) {
                        return true;
                    }
                    return false;
                });
    }
}
