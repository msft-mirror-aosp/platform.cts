/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2024_23704;

import static android.os.UserManager.DISALLOW_ADD_WIFI_CONFIG;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;

import static com.android.compatibility.common.util.SystemUtil.runShellCommand;
import static com.android.sts.common.SystemUtil.poll;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.app.admin.DevicePolicyManager;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.function.BooleanSupplier;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testCVE_2024_23704() {
        try {
            // Fetch 'DeviceOwnerComponentName' from 'DevicePolicyManager'
            final Context context = getApplicationContext();
            final DevicePolicyManager devicePolicyManager =
                    context.getSystemService(DevicePolicyManager.class);
            final ComponentName deviceOwnerComponentName =
                    devicePolicyManager.getDeviceOwnerComponentOnCallingUser();
            assume().withMessage(
                            "Unable to get 'DeviceOwnerComponentName' from DevicePolicyManager")
                    .that(deviceOwnerComponentName)
                    .isNotNull();

            // Check whether 'PocAdminReceiver' is set as device owner
            final ComponentName pocAdminReceiverComponentName =
                    new ComponentName(context, PocAdminReceiver.class);
            assume().withMessage("Unable to set 'PocAdminReceiver' as device owner")
                    .that(deviceOwnerComponentName.flattenToString())
                    .isEqualTo(pocAdminReceiverComponentName.flattenToString());

            try (AutoCloseable withDisallowAddWifiConfigRestriction =
                    withDisallowAddWifiConfigRestriction(
                            devicePolicyManager, pocAdminReceiverComponentName)) {
                // Launch activity to reproduce the vulnerability
                Intent intent = new Intent("com.android.settings.WIFI_DIALOG");
                context.startActivity(intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));

                // Without fix 'WifiDialogActivity' launches and test fails
                assertWithMessage(
                                "Device is vulnerable to b/299931761 !!"
                                        + " Bypass 'DISALLOW_ADD_WIFI_CONFIG' to connect to"
                                        + " an untrusted Wi-Fi network by WifiDialogActivity")
                        .that(
                                checkActivityLaunched(
                                        intent.resolveActivity(context.getPackageManager())
                                                .flattenToString()))
                        .isFalse();
            }
        } catch (Exception e) {
            assume().that(e).isNull();
        } finally {
            try {
                // Exit the test gracefully
                runShellCommand("input keyevent KEYCODE_HOME");
            } catch (Exception ignore) {
                // Ignore
            }
        }
    }

    private boolean checkActivityLaunched(String activityName) throws Exception {
        final Pattern resumedPattern = Pattern.compile("mResumed=true", Pattern.CASE_INSENSITIVE);
        final Pattern visiblePattern = Pattern.compile("mVisible=true", Pattern.CASE_INSENSITIVE);
        return poll(
                () -> {
                    final String dumpsysOutput =
                            runShellCommand(String.format("dumpsys activity -a " + activityName));
                    final Matcher resumedMatcher = resumedPattern.matcher(dumpsysOutput);
                    final Matcher visibleMatcher = visiblePattern.matcher(dumpsysOutput);
                    return resumedMatcher.find() && visibleMatcher.find();
                });
    }

    private AutoCloseable withDisallowAddWifiConfigRestriction(
            DevicePolicyManager devicePolicyManager, ComponentName componentName) throws Exception {
        // Return if 'DISALLOW_ADD_WIFI_CONFIG' restriction is already set
        final BooleanSupplier userRestriction =
                () ->
                        devicePolicyManager
                                .getUserRestrictions(componentName)
                                .getBoolean(DISALLOW_ADD_WIFI_CONFIG);
        if (userRestriction.getAsBoolean()) {
            return () -> {};
        }

        // Set 'DISALLOW_ADD_WIFI_CONFIG' restriction
        devicePolicyManager.addUserRestriction(componentName, DISALLOW_ADD_WIFI_CONFIG);
        assume().withMessage("Failed to set 'DISALLOW_ADD_WIFI_CONFIG' restriction")
                .that(userRestriction.getAsBoolean())
                .isTrue();

        // Remove 'DISALLOW_ADD_WIFI_CONFIG' restriction
        return () ->
                devicePolicyManager.clearUserRestriction(componentName, DISALLOW_ADD_WIFI_CONFIG);
    }
}
