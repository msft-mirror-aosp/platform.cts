/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2024_49733;

import static android.Manifest.permission.MANAGE_NOTIFICATION_LISTENERS;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static com.android.compatibility.common.util.SystemUtil.runWithShellPermissionIdentity;
import static com.android.sts.common.SystemUtil.poll;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.app.NotificationManager;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.provider.Settings;

import androidx.test.runner.AndroidJUnit4;
import androidx.test.uiautomator.By;
import androidx.test.uiautomator.UiDevice;
import androidx.test.uiautomator.UiObject2;
import androidx.test.uiautomator.Until;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.regex.Pattern;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    UiDevice uiDevice;

    @Test
    public void testPocCVE_2024_49733() {
        try {
            Context context = getInstrumentation().getTargetContext();
            uiDevice = UiDevice.getInstance(getInstrumentation());
            NotificationManager notificationManager =
                    context.getSystemService(NotificationManager.class);
            final String pkgName = context.getPackageName();
            runWithShellPermissionIdentity(
                    () -> {
                        ComponentName componentName =
                                new ComponentName(pkgName, pkgName + ".PocMalformedNLS");
                        notificationManager.setNotificationListenerAccessGranted(
                                componentName, true /* granted */, false /* userSet */);
                        boolean notificationListenerAccessGranted =
                                poll(
                                        () -> {
                                            return notificationManager
                                                    .isNotificationPolicyAccessGrantedForPackage(
                                                            pkgName);
                                        });
                        assume().that(notificationListenerAccessGranted).isTrue();
                    },
                    MANAGE_NOTIFICATION_LISTENERS);

            // Launch NotificationAccessSettingsActivity
            Intent intent = new Intent(Settings.ACTION_NOTIFICATION_LISTENER_SETTINGS);
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            context.startActivity(intent);

            // Wait till NotificationAccessSettingsActivity is visible
            UiObject2 visibleListener =
                    uiDevice.wait(
                            Until.findObject(
                                    By.text(
                                            Pattern.compile(
                                                    "android.security.cts.CVE_2024_49733_helper",
                                                    Pattern.CASE_INSENSITIVE))),
                            5_000L /* timeout */);
            assume().that(visibleListener).isNotNull();

            // Failing the test if PocInvisibleNLS is not listed
            UiObject2 invisibleListener =
                    uiDevice.findObject(
                            By.text(
                                    Pattern.compile(
                                            context.getPackageName(), Pattern.CASE_INSENSITIVE)));
            assertWithMessage("Device is vulnerable to b/365738306 !!!")
                    .that(invisibleListener)
                    .isNotNull();
        } catch (Exception e) {
            assume().that(e).isNull();
        } finally {
            uiDevice.pressHome();
        }
    }
}
