/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2023_35676;

import static android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static com.android.compatibility.common.util.SystemUtil.runShellCommand;
import static com.android.sts.common.DumpsysUtils.isActivityLaunched;
import static com.android.sts.common.SystemUtil.poll;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.app.Instrumentation;
import android.content.Context;

import androidx.test.runner.AndroidJUnit4;
import androidx.test.uiautomator.By;
import androidx.test.uiautomator.UiDevice;
import androidx.test.uiautomator.UiObject2;
import androidx.test.uiautomator.Until;

import com.android.internal.app.PlatLogoActivity;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    private Context mContext = null;

    @Test
    public void testCVE_2023_35676() {
        try {
            Instrumentation instrumentation = getInstrumentation();
            mContext = instrumentation.getTargetContext();
            try (AutoCloseable withAScreenShotImage = withAScreenShotImage()) {
                // Find cve_2023_35676_button and click on it
                UiDevice uiDevice = UiDevice.getInstance(instrumentation);
                UiObject2 uiObject =
                        uiDevice.wait(
                                Until.findObject(By.text(mContext.getString(R.string.cve_button))),
                                5_000L /* timeout */);
                assume().withMessage(mContext.getString(R.string.targetButtonNotAppear))
                        .that(uiObject)
                        .isNotNull();
                assume().withMessage("uiObject is not enabled")
                        .that(poll(() -> (uiObject.isEnabled())))
                        .isTrue();
                uiObject.click();

                // Wait for PlatLogoActivity to launch if activity starts fail the test otherwise
                // pass the test
                String platLogoActivityName = PlatLogoActivity.class.getName();
                assertWithMessage(mContext.getString(R.string.msgVunerableDevice))
                        .that(poll(() -> isActivityLaunched(platLogoActivityName)))
                        .isFalse();
            }
        } catch (Exception e) {
            assume().that(e).isNotNull();
        }
    }

    private AutoCloseable withAScreenShotImage() throws Exception {
        // Fetch imageId of the latest image
        final String contentQueryForImage =
                String.format(
                        "content query --uri %s --projection _id --sort _id",
                        EXTERNAL_CONTENT_URI.toString());
        final Pattern pattern = Pattern.compile("_id=(?<imageId>[0-9]+)");
        Matcher matcher = pattern.matcher(runShellCommand(contentQueryForImage));

        // Iterate to find latest image and store it's imageId
        int imageId = -1;
        while (matcher.find()) {
            imageId = Integer.parseInt(matcher.group(mContext.getString(R.string.imageId)));
        }

        // Take a screenshot
        runShellCommand(String.format("input keyevent KEYCODE_SYSRQ"));

        // Return AutoCloseable to remove captured screenshot
        final int previousImageId = imageId;

        return () -> {
            Matcher idmatcher = pattern.matcher(runShellCommand(contentQueryForImage));

            // Iterating to latest image to store it's imageId
            int latestImageId = -1;
            while (idmatcher.find()) {
                latestImageId =
                        Integer.parseInt(idmatcher.group(mContext.getString(R.string.imageId)));
            }

            // Remove the captured screenshot image, if it was successful
            if (latestImageId > previousImageId) {
                runShellCommand(
                        String.format(
                                "content delete --uri %s --where _id=%d",
                                EXTERNAL_CONTENT_URI.toString(), latestImageId));
            }
        };
    }
}
