/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.android.apps.miphone.aiai.matchmaker.overview.api.generatedv2;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;

import android.app.PendingIntent;
import android.content.Context;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.security.cts.CVE_2023_35676.R;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;

// For reference
// https://source.corp.google.com/piper///depot/google3/java/com/google/android/apps/miphone/aiai/matchmaker/overview/api/generatedv2/EntitiesData.java
public class EntitiesData implements Parcelable {

    public static final Creator<EntitiesData> CREATOR =
            new Creator<EntitiesData>() {
                @Override
                public EntitiesData createFromParcel(Parcel in) {
                    return null;
                }

                @Override
                public EntitiesData[] newArray(int size) {
                    return new EntitiesData[size];
                }
            };

    public final Map<String, Bitmap> bitmapMap;
    public final SuggestParcelables.Entities entities;
    public final Map<String, PendingIntent> pendingIntentMap;

    public EntitiesData(
            SuggestParcelables.Entities entities, Map bitmapMap, Map pendingIntentMap) {
        this.entities = entities;
        this.bitmapMap = bitmapMap;
        this.pendingIntentMap = pendingIntentMap;
    }

    @Override
    public final int describeContents() {
        return 0;
    }

    @Override
    public final void writeToParcel(Parcel parcel, int i /* flag */) {
        Context context = getApplicationContext();
        Bundle entityBundle = new Bundle();
        if (entities.entities == null) {
            entityBundle.putParcelableArrayList(context.getString(R.string.entities), null);
        } else {
            ArrayList<Bundle> entitiesList = new ArrayList<>(entities.entities.size());
            Iterator entityIterator = entities.entities.iterator();
            while (entityIterator.hasNext()) {
                SuggestParcelables.Entity entity =
                        (SuggestParcelables.Entity) entityIterator.next();
                if (entity == null) {
                    entitiesList.addAll(null);
                } else {
                    Bundle actionBundle = new Bundle();
                    if (entity.actions == null) {
                        actionBundle.putParcelableArrayList(
                                context.getString(R.string.actions), null);
                    } else {
                        ArrayList<Bundle> actionList = new ArrayList<>(entity.actions.size());
                        Iterator actionIterator = entity.actions.iterator();
                        while (actionIterator.hasNext()) {
                            SuggestParcelables.ActionGroup actionGroup =
                                    (SuggestParcelables.ActionGroup) actionIterator.next();
                            if (actionGroup == null) {
                                actionList.addAll(null);
                            } else {
                                Bundle actionGroupBundle = new Bundle();
                                actionGroupBundle.putString(
                                        context.getString(R.string.id), actionGroup.id);
                                actionGroupBundle.putString(
                                        context.getString(R.string.displayName),
                                        actionGroup.displayName);
                                SuggestParcelables.Action action = actionGroup.mainAction;
                                if (action == null) {
                                    actionGroupBundle.putBundle(
                                            context.getString(R.string.mainAction), null);
                                } else {
                                    actionGroupBundle.putBundle(
                                            context.getString(R.string.mainAction),
                                            action.writeToBundle());
                                }
                                actionList.add(actionGroupBundle);
                            }
                        }
                        actionBundle.putParcelableArrayList(
                                context.getString(R.string.actions), actionList);
                    }
                    actionBundle.putParcelableArrayList("entitySpans", null);
                    actionBundle.putString(
                            context.getString(R.string.searchQueryHint), entity.searchQueryHint);
                    entitiesList.add(actionBundle);
                }
            }
            entityBundle.putParcelableArrayList(context.getString(R.string.entities), entitiesList);
        }

        SuggestParcelables.ExtrasInfo extrasInfo = entities.extrasInfo;
        Bundle entitySubBundle;
        if (extrasInfo == null) {
            entitySubBundle = null;
        } else {
            entitySubBundle = new Bundle();
            entitySubBundle.putBoolean(
                    context.getString(R.string.containsPendingIntents),
                    extrasInfo.containsPendingIntents);
            entitySubBundle.putBoolean(
                    context.getString(R.string.containsBitmaps), extrasInfo.containsBitmaps);
        }

        entityBundle.putBundle("extrasInfo", entitySubBundle);
        entityBundle.writeToParcel(parcel, 0);

        SuggestParcelables.ExtrasInfo extrasInfo2 = this.entities.extrasInfo;
        if (extrasInfo2 != null) {
            if (extrasInfo2.containsBitmaps) {
                parcel.writeMap(this.bitmapMap);
            }
            if (this.entities.extrasInfo.containsPendingIntents) {
                parcel.writeMap(this.pendingIntentMap);
            }
        }
    }
}
