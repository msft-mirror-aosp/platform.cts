/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2021_0682;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;

import static com.android.sts.common.SystemUtil.poll;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.app.KeyguardManager;
import android.content.Context;
import android.content.SharedPreferences;
import android.os.PowerManager;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testPocCVE_2021_0682() {
        try {
            // Check if device is locked
            final Context context = getApplicationContext();
            assume().withMessage("Device is not locked")
                    .that(context.getSystemService(KeyguardManager.class).isDeviceLocked())
                    .isTrue();

            // Check if screen is on
            assume().withMessage("Device screen is not on")
                    .that(context.getSystemService(PowerManager.class).isInteractive())
                    .isTrue();

            // Check if 'onServiceConnected()' was successful or an exception occurred
            final SharedPreferences sharedPreferences =
                    context.getSharedPreferences(context.getPackageName(), Context.MODE_PRIVATE);
            assume().withMessage("Failed to set 'PocAccessibilityService' as serviceinfo")
                    .that(
                            exceptionCheck(
                                    context,
                                    sharedPreferences,
                                    "onServiceConnected()",
                                    context.getString(R.string.pocServiceKey)))
                    .isTrue();

            // Check if 'PocActivity' is successfully launched or an exception occurred
            assume().withMessage("Unable to launch 'PocActivity()'")
                    .that(
                            exceptionCheck(
                                    context,
                                    sharedPreferences,
                                    "PocActivity()",
                                    context.getString(R.string.pocActivityKey)))
                    .isTrue();

            // Check if 'onAccessibilityEvent()' was invoked or an exception occurred
            assume().withMessage("Unable to start 'onAccessibilityEvent()'")
                    .that(
                            exceptionCheck(
                                    context,
                                    sharedPreferences,
                                    "onAccessibilityEvent()",
                                    context.getString(R.string.onAccessibilityKey)))
                    .isTrue();

            // Without fix, settings text shows private version of notification
            final String testResultKey = context.getString(R.string.testResultKey);
            assertWithMessage(
                            "This device is vulnerable to b/159624555 !! There is a possible"
                                    + " disclosure of notification data")
                    .that(poll(() -> sharedPreferences.getBoolean(testResultKey, false)))
                    .isFalse();
        } catch (Exception e) {
            assume().that(e).isNull();
        }
    }

    private boolean exceptionCheck(
            Context context,
            SharedPreferences sharedPreferences,
            String methodName,
            String methodKey)
            throws InterruptedException {
        // Wait until the method key or exception message is found
        if (poll(
                () ->
                        sharedPreferences.contains(methodKey)
                                || sharedPreferences.contains(
                                        context.getString(R.string.exceptionMessage)))) {
            if (sharedPreferences.getBoolean(methodKey, false)) {
                return true;
            }

            // Check if exception message is present in shared preferences
            assume().withMessage(String.format("Exception occurred in %s !!", methodName))
                    .that(sharedPreferences.contains(context.getString(R.string.exceptionMessage)))
                    .isFalse();
        }
        return false;
    }
}
