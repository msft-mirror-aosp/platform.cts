/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2024_31332;

import static android.os.UserManager.DISALLOW_ADD_WIFI_CONFIG;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;

import static com.android.sts.common.DumpsysUtils.isActivityVisible;
import static com.android.sts.common.SystemUtil.poll;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.app.admin.DevicePolicyManager;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.net.wifi.WifiManager;
import android.provider.Settings;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.function.BooleanSupplier;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testCVE_2024_31332() {
        try {
            // Check for easy connect support
            final Context context = getApplicationContext();
            final WifiManager wifiManager = context.getSystemService(WifiManager.class);
            assume().withMessage(
                            "Current device does not support easy connect."
                                    + " Hence, CTS for CVE-2024-31332 cannot be validated.")
                    .that(wifiManager.isEasyConnectSupported())
                    .isTrue();

            // Fetch 'DeviceOwnerComponentName' from 'DevicePolicyManager'
            final DevicePolicyManager devicePolicyManager =
                    context.getSystemService(DevicePolicyManager.class);
            final ComponentName deviceOwnerComponentName =
                    devicePolicyManager.getDeviceOwnerComponentOnCallingUser();
            assume().withMessage(
                            "Unable to get 'DeviceOwnerComponentName' from DevicePolicyManager")
                    .that(deviceOwnerComponentName)
                    .isNotNull();

            // Check whether 'PocDeviceAdminReceiver' is set as device owner
            final ComponentName pocDeviceAdminReceiverComponentName =
                    new ComponentName(context, PocDeviceAdminReceiver.class);
            assume().withMessage("Unable to set 'PocDeviceAdminReceiver' as device owner")
                    .that(deviceOwnerComponentName.flattenToString())
                    .isEqualTo(pocDeviceAdminReceiverComponentName.flattenToString());

            try (AutoCloseable withDisallowAddWifiConfigRestriction =
                    withDisallowAddWifiConfigRestriction(
                            devicePolicyManager, pocDeviceAdminReceiverComponentName)) {
                // Launch activity to reproduce the vulnerability
                final int cveBugId = 299931076;
                final String mockQrCode = String.format("DPP:I:%d;K:%d;", cveBugId, cveBugId);
                final Intent intent = new Intent(Settings.ACTION_PROCESS_WIFI_EASY_CONNECT_URI);
                context.startActivity(
                        intent.setData(Uri.parse(mockQrCode))
                                .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));

                // Without fix 'WifiDppConfiguratorActivity' launches and test fails
                final String activityName =
                        intent.resolveActivity(context.getPackageManager()).flattenToString();
                assertWithMessage(
                                "Device is vulnerable to b/299931076 !! Connect to an untrusted"
                                        + " Wi-Fi network through WifiDppConfiguratorActivity.")
                        .that(poll(() -> isActivityVisible(activityName)))
                        .isFalse();
            }
        } catch (Exception e) {
            assume().that(e).isNull();
        }
    }

    private AutoCloseable withDisallowAddWifiConfigRestriction(
            DevicePolicyManager devicePolicyManager, ComponentName componentName) throws Exception {
        // Return if 'DISALLOW_ADD_WIFI_CONFIG' restriction is already set
        final BooleanSupplier userRestriction =
                () ->
                        devicePolicyManager
                                .getUserRestrictions(componentName)
                                .getBoolean(DISALLOW_ADD_WIFI_CONFIG);
        if (userRestriction.getAsBoolean()) {
            return () -> {};
        }

        // Set 'DISALLOW_ADD_WIFI_CONFIG' restriction
        devicePolicyManager.addUserRestriction(componentName, DISALLOW_ADD_WIFI_CONFIG);
        assume().withMessage("Failed to set 'DISALLOW_ADD_WIFI_CONFIG' restriction")
                .that(userRestriction.getAsBoolean())
                .isTrue();

        // Remove 'DISALLOW_ADD_WIFI_CONFIG' restriction
        return () ->
                devicePolicyManager.clearUserRestriction(componentName, DISALLOW_ADD_WIFI_CONFIG);
    }
}
