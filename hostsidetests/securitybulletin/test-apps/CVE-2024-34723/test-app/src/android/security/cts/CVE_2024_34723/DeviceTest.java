/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2024_34723;

import static android.os.Build.VERSION.SDK_INT;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;

import static com.android.compatibility.common.util.ShellUtils.runShellCommand;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testPocCVE_2024_34723() {
        try {
            // Fetch and add the flag 'RECEIVER_EXPORTED' for 'TIRAMISU' and above versions to
            // keep the code consistent
            final Context appContext = getApplicationContext();
            final int requiredFlag =
                    SDK_INT >= 33 /* TIRAMISU */
                            ? (int)
                                    Context.class
                                            .getField(
                                                    appContext.getString(
                                                            R.string.receiverExportedString))
                                            .get(appContext)
                            : 0;

            // Register a broadcast receiver to receive broadcast from 'MaliciousActivity'
            final CompletableFuture<Boolean> isDeviceVulnerable = new CompletableFuture<Boolean>();
            final Semaphore broadcastReceiverRegisteredInPocService = new Semaphore(0);
            appContext.registerReceiver(
                    new BroadcastReceiver() {
                        @Override
                        public void onReceive(Context context, Intent intent) {
                            try {
                                // Check for the set value to pass/fail the test
                                final String testStatus =
                                        intent.getStringExtra(
                                                appContext.getString(
                                                        R.string.deviceVulnerabilityStatus));
                                if (testStatus != null) {
                                    isDeviceVulnerable.complete(
                                            testStatus.equals(
                                                    appContext.getString(R.string.positive)));
                                }

                                // Check if the broadcast receiver has been registered in PocService
                                if (intent.getBooleanExtra(
                                        appContext.getString(R.string.broadcastReceiverRegistered),
                                        false)) {
                                    broadcastReceiverRegisteredInPocService.release();
                                }
                            } catch (Exception e) {
                                // Ignore
                            }
                        }
                    },
                    new IntentFilter(appContext.getString(R.string.testAction)),
                    requiredFlag);

            // Invoke the 'PocContentProvider' to start the 'PocService'
            runShellCommand("content call --uri content://cve_2024_34723 --method start");

            // Wait for the broadcast receiver to get registered in PocService to reproduce
            // the vulnerability
            assume().withMessage("Broadcast failed to register in PocService")
                    .that(
                            broadcastReceiverRegisteredInPocService.tryAcquire(
                                    10L /* timeout */, TimeUnit.SECONDS))
                    .isTrue();

            // Send broadcast to execute the 'BroadcastReceiver::onReceive' in PocService
            appContext.sendBroadcast(
                    new Intent(appContext.getString(R.string.invokeVulnerabilityAction)));

            // Without fix, the 'MaliciousActivity' launches.
            // Wait for broadcast from 'MaliciousActivity'.
            assertWithMessage("Device is vulnerable to b/317048338!!")
                    .that(isDeviceVulnerable.get(10L /* timeout */, TimeUnit.SECONDS))
                    .isFalse();
        } catch (Exception e) {
            assume().that(e).isNull();
        }
    }
}
