/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2022_20448_test;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.google.common.truth.TruthJUnit.assume;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.UserManager;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testPocCVE_2022_20448() {
        try {
            Context context = getApplicationContext();

            // Check if the device supports multiple users or not
            assume().withMessage(context.getString(R.string.multipleUsersMsg))
                    .that(context.getSystemService(UserManager.class).supportsMultipleUsers())
                    .isTrue();

            // Check for any exception from PocAccessibilityService
            SharedPreferences sharedPreferences =
                    context.getSharedPreferences(
                            context.getString(R.string.sharedPrefsName), Context.MODE_PRIVATE);
            String msgException =
                    sharedPreferences.getString(
                            context.getString(R.string.msgException),
                            context.getString(R.string.noException));
            assume().withMessage(msgException)
                    .that(msgException)
                    .matches(context.getString(R.string.noException));

            // Fail the test if boolean value retrieved from PocAccessibilityService is 'true'
            assertWithMessage(context.getString(R.string.failureMsg))
                    .that(
                            sharedPreferences.getBoolean(
                                    context.getString(R.string.testResultKey), false))
                    .isFalse();
        } catch (Exception e) {
            assume().that(e).isNull();
        }
    }
}
