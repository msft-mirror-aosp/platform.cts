/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2022_20448_test;

import android.accessibilityservice.AccessibilityService;
import android.accessibilityservice.AccessibilityServiceInfo;
import android.app.Notification;
import android.content.SharedPreferences;
import android.view.accessibility.AccessibilityEvent;

public class PocAccessibilityService extends AccessibilityService {
    @Override
    public void onInterrupt() {}

    @Override
    protected void onServiceConnected() {
        try {
            AccessibilityServiceInfo info = new AccessibilityServiceInfo();
            info.eventTypes = AccessibilityEvent.TYPE_NOTIFICATION_STATE_CHANGED;
            info.feedbackType = AccessibilityServiceInfo.FEEDBACK_ALL_MASK;
            setServiceInfo(info);
        } catch (Exception e) {
            try {
                getSharedPreferences(e.getMessage() != null ? e.getMessage() : "").commit();
            } catch (Exception ignored) {
                // Ignore exceptions here
            }
        }
    }

    @Override
    public void onAccessibilityEvent(AccessibilityEvent event) {
        try {
            Notification notification = (Notification) event.getParcelableData();
            if (event.getEventType() == AccessibilityEvent.TYPE_NOTIFICATION_STATE_CHANGED
                    && notification.getSettingsText().toString()
                        .equals(getString(R.string.settingsText))) {
                getSharedPreferences(null)
                        .putBoolean(getString(R.string.testResultKey), true)
                        .commit();
            }
        } catch (Exception e) {
            try {
                getSharedPreferences(e.getMessage() != null ? e.getMessage() : "").commit();
            } catch (Exception ignored) {
                // Ignore exceptions here
            }
        }
    }

    private SharedPreferences.Editor getSharedPreferences(String exceptionMessage) {
        SharedPreferences sharedPreferences =
                getSharedPreferences(getString(R.string.sharedPrefsName), MODE_PRIVATE);
        if (exceptionMessage != null) {
            sharedPreferences
                    .edit()
                    .putString(getString(R.string.msgException), exceptionMessage)
                    .commit();
        }
        return sharedPreferences.edit();
    }
}
