/**
 * Copyright (C) 2021 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <codecvt>
#include <fstream>
#include "../includes/common.h"
#include <proxy_resolver_v8_wrapper.h>

using namespace std;

void poc(char* raw) {
    ProxyResolverV8Handle* handle = ProxyResolverV8Handle_new();
    string u8Script(raw);
    u16string u16Script =
            wstring_convert<codecvt_utf8_utf16<char16_t>, char16_t> { }
                    .from_bytes(u8Script);

    ProxyResolverV8Handle_SetPacScript(handle, u16Script.data());
    const char16_t* spec = u"", *host = u"";
    ProxyResolverV8Handle_GetProxyForURL(handle, spec, host);
    ProxyResolverV8Handle_delete(handle);
}

int main(int argc, char **argv) {
    if (argc != 2) {
        return EXIT_FAILURE;
    }

    ifstream stream;
    stream.open(argv[1]);
    if (stream.rdstate() != ifstream::goodbit) {
        return EXIT_FAILURE;
    }

    stream.seekg(0, ios::end);
    size_t size = stream.tellg();
    stream.seekg(0);
    char* raw = (char*) calloc(size + 1, sizeof(char));
    stream.read(raw, size);
    time_t currentTime = start_timer();
    while (timer_active(currentTime)) {
        poc(raw);
    }

    free(raw);
    return EXIT_SUCCESS;
}
