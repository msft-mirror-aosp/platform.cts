// Copyright (C) 2024 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
//   protoc-gen-go v1.30.0
//   protoc        v3.21.12
// source: requirements.proto

package requirements_go_proto

import (
  mpc_go_proto "cts/test/mediapc/requirements/mpc_go_proto"
  protoreflect "google.golang.org/protobuf/reflect/protoreflect"
  protoimpl "google.golang.org/protobuf/runtime/protoimpl"
  reflect "reflect"
  sync "sync"
)

const (
  // Verify that this generated code is sufficiently up-to-date.
  _ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
  // Verify that runtime/protoimpl is sufficiently up-to-date.
  _ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Group int32

const (
  Group_GROUP_UNSPECIFIED Group = 0
  Group_GROUP_MEDIA       Group = 1
  Group_GROUP_CAMERA      Group = 2
  Group_GROUP_HARDWARE    Group = 3
  Group_GROUP_PERFORMANCE Group = 4
)

// Enum value maps for Group.
var (
  Group_name = map[int32]string{
    0: "GROUP_UNSPECIFIED",
    1: "GROUP_MEDIA",
    2: "GROUP_CAMERA",
    3: "GROUP_HARDWARE",
    4: "GROUP_PERFORMANCE",
  }
  Group_value = map[string]int32{
    "GROUP_UNSPECIFIED": 0,
    "GROUP_MEDIA":       1,
    "GROUP_CAMERA":      2,
    "GROUP_HARDWARE":    3,
    "GROUP_PERFORMANCE": 4,
  }
)

func (x Group) Enum() *Group {
  p := new(Group)
  *p = x
  return p
}

func (x Group) String() string {
  return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Group) Descriptor() protoreflect.EnumDescriptor {
  return file_requirements_proto_enumTypes[0].Descriptor()
}

func (Group) Type() protoreflect.EnumType {
  return &file_requirements_proto_enumTypes[0]
}

func (x Group) Number() protoreflect.EnumNumber {
  return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Group) UnmarshalJSON(b []byte) error {
  num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
  if err != nil {
    return err
  }
  *x = Group(num)
  return nil
}

// Deprecated: Use Group.Descriptor instead.
func (Group) EnumDescriptor() ([]byte, []int) {
  return file_requirements_proto_rawDescGZIP(), []int{0}
}

type Comparison int32

const (
  Comparison_COMPARISON_UNSPECIFIED           Comparison = 0
  Comparison_COMPARISON_EQUAL                 Comparison = 1
  Comparison_COMPARISON_LESS_THAN             Comparison = 2
  Comparison_COMPARISON_LESS_THAN_OR_EQUAL    Comparison = 3
  Comparison_COMPARISON_GREATER_THAN          Comparison = 4
  Comparison_COMPARISON_GREATER_THAN_OR_EQUAL Comparison = 5
  Comparison_COMPARISON_INFO_ONLY             Comparison = 6
)

// Enum value maps for Comparison.
var (
  Comparison_name = map[int32]string{
    0: "COMPARISON_UNSPECIFIED",
    1: "COMPARISON_EQUAL",
    2: "COMPARISON_LESS_THAN",
    3: "COMPARISON_LESS_THAN_OR_EQUAL",
    4: "COMPARISON_GREATER_THAN",
    5: "COMPARISON_GREATER_THAN_OR_EQUAL",
    6: "COMPARISON_INFO_ONLY",
  }
  Comparison_value = map[string]int32{
    "COMPARISON_UNSPECIFIED":           0,
    "COMPARISON_EQUAL":                 1,
    "COMPARISON_LESS_THAN":             2,
    "COMPARISON_LESS_THAN_OR_EQUAL":    3,
    "COMPARISON_GREATER_THAN":          4,
    "COMPARISON_GREATER_THAN_OR_EQUAL": 5,
    "COMPARISON_INFO_ONLY":             6,
  }
)

func (x Comparison) Enum() *Comparison {
  p := new(Comparison)
  *p = x
  return p
}

func (x Comparison) String() string {
  return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Comparison) Descriptor() protoreflect.EnumDescriptor {
  return file_requirements_proto_enumTypes[1].Descriptor()
}

func (Comparison) Type() protoreflect.EnumType {
  return &file_requirements_proto_enumTypes[1]
}

func (x Comparison) Number() protoreflect.EnumNumber {
  return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Comparison) UnmarshalJSON(b []byte) error {
  num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
  if err != nil {
    return err
  }
  *x = Comparison(num)
  return nil
}

// Deprecated: Use Comparison.Descriptor instead.
func (Comparison) EnumDescriptor() ([]byte, []int) {
  return file_requirements_proto_rawDescGZIP(), []int{1}
}

type RequirementList struct {
  state         protoimpl.MessageState
  sizeCache     protoimpl.SizeCache
  unknownFields protoimpl.UnknownFields

  Requirements []*Requirement `protobuf:"bytes,1,rep,name=requirements" json:"requirements,omitempty"`
}

func (x *RequirementList) Reset() {
  *x = RequirementList{}
  if protoimpl.UnsafeEnabled {
    mi := &file_requirements_proto_msgTypes[0]
    ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
    ms.StoreMessageInfo(mi)
  }
}

func (x *RequirementList) String() string {
  return protoimpl.X.MessageStringOf(x)
}

func (*RequirementList) ProtoMessage() {}

func (x *RequirementList) ProtoReflect() protoreflect.Message {
  mi := &file_requirements_proto_msgTypes[0]
  if protoimpl.UnsafeEnabled && x != nil {
    ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
    if ms.LoadMessageInfo() == nil {
      ms.StoreMessageInfo(mi)
    }
    return ms
  }
  return mi.MessageOf(x)
}

// Deprecated: Use RequirementList.ProtoReflect.Descriptor instead.
func (*RequirementList) Descriptor() ([]byte, []int) {
  return file_requirements_proto_rawDescGZIP(), []int{0}
}

func (x *RequirementList) GetRequirements() []*Requirement {
  if x != nil {
    return x.Requirements
  }
  return nil
}

// A Media Performance Class Requirement with required measurements and
// specifications including required values for each relevant MPC level.
type Requirement struct {
  state         protoimpl.MessageState
  sizeCache     protoimpl.SizeCache
  unknownFields protoimpl.UnknownFields

  // ID exactly as shown in the CDD
  Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
  // Short human readable name.
  Name        *string                    `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
  Description *string                    `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
  Group       *Group                     `protobuf:"varint,4,opt,name=group,enum=android.media.performanceclass.requirements.Group" json:"group,omitempty"`
  Specs       map[int64]*RequirementSpec `protobuf:"bytes,5,rep,name=specs" json:"specs,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
  // measurement_id to RequiredMeasurements
  // The measurement_id is a field name safe string.
  Measurements map[string]*RequiredMeasurement `protobuf:"bytes,6,rep,name=measurements" json:"measurements,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *Requirement) Reset() {
  *x = Requirement{}
  if protoimpl.UnsafeEnabled {
    mi := &file_requirements_proto_msgTypes[1]
    ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
    ms.StoreMessageInfo(mi)
  }
}

func (x *Requirement) String() string {
  return protoimpl.X.MessageStringOf(x)
}

func (*Requirement) ProtoMessage() {}

func (x *Requirement) ProtoReflect() protoreflect.Message {
  mi := &file_requirements_proto_msgTypes[1]
  if protoimpl.UnsafeEnabled && x != nil {
    ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
    if ms.LoadMessageInfo() == nil {
      ms.StoreMessageInfo(mi)
    }
    return ms
  }
  return mi.MessageOf(x)
}

// Deprecated: Use Requirement.ProtoReflect.Descriptor instead.
func (*Requirement) Descriptor() ([]byte, []int) {
  return file_requirements_proto_rawDescGZIP(), []int{1}
}

func (x *Requirement) GetId() string {
  if x != nil && x.Id != nil {
    return *x.Id
  }
  return ""
}

func (x *Requirement) GetName() string {
  if x != nil && x.Name != nil {
    return *x.Name
  }
  return ""
}

func (x *Requirement) GetDescription() string {
  if x != nil && x.Description != nil {
    return *x.Description
  }
  return ""
}

func (x *Requirement) GetGroup() Group {
  if x != nil && x.Group != nil {
    return *x.Group
  }
  return Group_GROUP_UNSPECIFIED
}

func (x *Requirement) GetSpecs() map[int64]*RequirementSpec {
  if x != nil {
    return x.Specs
  }
  return nil
}

func (x *Requirement) GetMeasurements() map[string]*RequiredMeasurement {
  if x != nil {
    return x.Measurements
  }
  return nil
}

type RequirementSpec struct {
  state         protoimpl.MessageState
  sizeCache     protoimpl.SizeCache
  unknownFields protoimpl.UnknownFields

  Mpc *mpc_go_proto.MediaPerformanceClass `protobuf:"varint,1,opt,name=mpc,enum=android.media.performanceclass.MediaPerformanceClass" json:"mpc,omitempty"`
  // The specification of the requirement at the given MPC level exactly as
  // described in the CDD.
  Specification *string `protobuf:"bytes,3,opt,name=specification" json:"specification,omitempty"`
  // measurement_id to RequiredMeasurements
  //
  // The measurement_id is a field name safe string.
  // The measurement_id must match the id of a RequiredMeasurement in the parent
  // Requirement.
  RequiredValues map[string]*RequiredValue `protobuf:"bytes,4,rep,name=required_values,json=requiredValues" json:"required_values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *RequirementSpec) Reset() {
  *x = RequirementSpec{}
  if protoimpl.UnsafeEnabled {
    mi := &file_requirements_proto_msgTypes[2]
    ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
    ms.StoreMessageInfo(mi)
  }
}

func (x *RequirementSpec) String() string {
  return protoimpl.X.MessageStringOf(x)
}

func (*RequirementSpec) ProtoMessage() {}

func (x *RequirementSpec) ProtoReflect() protoreflect.Message {
  mi := &file_requirements_proto_msgTypes[2]
  if protoimpl.UnsafeEnabled && x != nil {
    ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
    if ms.LoadMessageInfo() == nil {
      ms.StoreMessageInfo(mi)
    }
    return ms
  }
  return mi.MessageOf(x)
}

// Deprecated: Use RequirementSpec.ProtoReflect.Descriptor instead.
func (*RequirementSpec) Descriptor() ([]byte, []int) {
  return file_requirements_proto_rawDescGZIP(), []int{2}
}

func (x *RequirementSpec) GetMpc() mpc_go_proto.MediaPerformanceClass {
  if x != nil && x.Mpc != nil {
    return *x.Mpc
  }
  return mpc_go_proto.MediaPerformanceClass(0)
}

func (x *RequirementSpec) GetSpecification() string {
  if x != nil && x.Specification != nil {
    return *x.Specification
  }
  return ""
}

func (x *RequirementSpec) GetRequiredValues() map[string]*RequiredValue {
  if x != nil {
    return x.RequiredValues
  }
  return nil
}

// A required measurement needed verifiy a MPC requirement.
type RequiredMeasurement struct {
  state         protoimpl.MessageState
  sizeCache     protoimpl.SizeCache
  unknownFields protoimpl.UnknownFields

  // The id is a field name safe string.
  Id          *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
  Description *string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (x *RequiredMeasurement) Reset() {
  *x = RequiredMeasurement{}
  if protoimpl.UnsafeEnabled {
    mi := &file_requirements_proto_msgTypes[3]
    ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
    ms.StoreMessageInfo(mi)
  }
}

func (x *RequiredMeasurement) String() string {
  return protoimpl.X.MessageStringOf(x)
}

func (*RequiredMeasurement) ProtoMessage() {}

func (x *RequiredMeasurement) ProtoReflect() protoreflect.Message {
  mi := &file_requirements_proto_msgTypes[3]
  if protoimpl.UnsafeEnabled && x != nil {
    ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
    if ms.LoadMessageInfo() == nil {
      ms.StoreMessageInfo(mi)
    }
    return ms
  }
  return mi.MessageOf(x)
}

// Deprecated: Use RequiredMeasurement.ProtoReflect.Descriptor instead.
func (*RequiredMeasurement) Descriptor() ([]byte, []int) {
  return file_requirements_proto_rawDescGZIP(), []int{3}
}

func (x *RequiredMeasurement) GetId() string {
  if x != nil && x.Id != nil {
    return *x.Id
  }
  return ""
}

func (x *RequiredMeasurement) GetDescription() string {
  if x != nil && x.Description != nil {
    return *x.Description
  }
  return ""
}

// A required value for a RequiredMeasurement at a given MPC level.
type RequiredValue struct {
  state         protoimpl.MessageState
  sizeCache     protoimpl.SizeCache
  unknownFields protoimpl.UnknownFields

  // The id is a field name safe string.
  Id         *string     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
  Comparison *Comparison `protobuf:"varint,2,opt,name=comparison,enum=android.media.performanceclass.requirements.Comparison" json:"comparison,omitempty"`
  // Types that are assignable to Value:
  //
  //  *RequiredValue_StringValue
  //  *RequiredValue_IntValue
  //  *RequiredValue_DoubleValue
  Value isRequiredValue_Value `protobuf_oneof:"value"`
}

func (x *RequiredValue) Reset() {
  *x = RequiredValue{}
  if protoimpl.UnsafeEnabled {
    mi := &file_requirements_proto_msgTypes[4]
    ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
    ms.StoreMessageInfo(mi)
  }
}

func (x *RequiredValue) String() string {
  return protoimpl.X.MessageStringOf(x)
}

func (*RequiredValue) ProtoMessage() {}

func (x *RequiredValue) ProtoReflect() protoreflect.Message {
  mi := &file_requirements_proto_msgTypes[4]
  if protoimpl.UnsafeEnabled && x != nil {
    ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
    if ms.LoadMessageInfo() == nil {
      ms.StoreMessageInfo(mi)
    }
    return ms
  }
  return mi.MessageOf(x)
}

// Deprecated: Use RequiredValue.ProtoReflect.Descriptor instead.
func (*RequiredValue) Descriptor() ([]byte, []int) {
  return file_requirements_proto_rawDescGZIP(), []int{4}
}

func (x *RequiredValue) GetId() string {
  if x != nil && x.Id != nil {
    return *x.Id
  }
  return ""
}

func (x *RequiredValue) GetComparison() Comparison {
  if x != nil && x.Comparison != nil {
    return *x.Comparison
  }
  return Comparison_COMPARISON_UNSPECIFIED
}

func (m *RequiredValue) GetValue() isRequiredValue_Value {
  if m != nil {
    return m.Value
  }
  return nil
}

func (x *RequiredValue) GetStringValue() string {
  if x, ok := x.GetValue().(*RequiredValue_StringValue); ok {
    return x.StringValue
  }
  return ""
}

func (x *RequiredValue) GetIntValue() int64 {
  if x, ok := x.GetValue().(*RequiredValue_IntValue); ok {
    return x.IntValue
  }
  return 0
}

func (x *RequiredValue) GetDoubleValue() float64 {
  if x, ok := x.GetValue().(*RequiredValue_DoubleValue); ok {
    return x.DoubleValue
  }
  return 0
}

type isRequiredValue_Value interface {
  isRequiredValue_Value()
}

type RequiredValue_StringValue struct {
  StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,oneof"`
}

type RequiredValue_IntValue struct {
  IntValue int64 `protobuf:"varint,4,opt,name=int_value,json=intValue,oneof"`
}

type RequiredValue_DoubleValue struct {
  DoubleValue float64 `protobuf:"fixed64,5,opt,name=double_value,json=doubleValue,oneof"`
}

func (*RequiredValue_StringValue) isRequiredValue_Value() {}

func (*RequiredValue_IntValue) isRequiredValue_Value() {}

func (*RequiredValue_DoubleValue) isRequiredValue_Value() {}

var File_requirements_proto protoreflect.FileDescriptor

var file_requirements_proto_rawDesc = []byte{
  0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70,
  0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2b, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x6d, 0x65,
  0x64, 0x69, 0x61, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x63,
  0x6c, 0x61, 0x73, 0x73, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
  0x73, 0x1a, 0x09, 0x6d, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6f, 0x0a, 0x0f,
  0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
  0x5c, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
  0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
  0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
  0x65, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
  0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
  0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xe4, 0x04,
  0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
  0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
  0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
  0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
  0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
  0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01,
  0x28, 0x0e, 0x32, 0x32, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x6d, 0x65, 0x64,
  0x69, 0x61, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x63, 0x6c,
  0x61, 0x73, 0x73, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
  0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x59, 0x0a,
  0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x61,
  0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x65, 0x72,
  0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x72, 0x65,
  0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69,
  0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72,
  0x79, 0x52, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x12, 0x6e, 0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x73,
  0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a,
  0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70,
  0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2e,
  0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71,
  0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
  0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x65, 0x61, 0x73,
  0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x76, 0x0a, 0x0a, 0x53, 0x70, 0x65, 0x63,
  0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
  0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x52, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
  0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
  0x64, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
  0x6e, 0x63, 0x65, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
  0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
  0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
  0x1a, 0x81, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
  0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
  0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x56, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
  0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69,
  0x64, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
  0x6e, 0x63, 0x65, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
  0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4d, 0x65,
  0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
  0x3a, 0x02, 0x38, 0x01, 0x22, 0xfa, 0x02, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
  0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x47, 0x0a, 0x03, 0x6d, 0x70, 0x63, 0x18,
  0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e,
  0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
  0x65, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x65, 0x72, 0x66,
  0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x03, 0x6d, 0x70,
  0x63, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
  0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
  0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69,
  0x72, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
  0x32, 0x50, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
  0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x63, 0x6c, 0x61, 0x73,
  0x73, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52,
  0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52,
  0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74,
  0x72, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
  0x65, 0x73, 0x1a, 0x7d, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x56, 0x61,
  0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
  0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x50, 0x0a, 0x05, 0x76,
  0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x6e, 0x64,
  0x72, 0x6f, 0x69, 0x64, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f,
  0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x72, 0x65, 0x71, 0x75,
  0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
  0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
  0x01, 0x22, 0x47, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x61,
  0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
  0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
  0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
  0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xea, 0x01, 0x0a, 0x0d, 0x52,
  0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02,
  0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x0a,
  0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
  0x32, 0x37, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
  0x2e, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x63, 0x6c, 0x61, 0x73,
  0x73, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x43,
  0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
  0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
  0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73,
  0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e,
  0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
  0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75,
  0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48,
  0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07,
  0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x6c, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70,
  0x12, 0x15, 0x0a, 0x11, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
  0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x52, 0x4f, 0x55, 0x50,
  0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x4f, 0x55,
  0x50, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x52,
  0x4f, 0x55, 0x50, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x10, 0x03, 0x12, 0x15,
  0x0a, 0x11, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x41,
  0x4e, 0x43, 0x45, 0x10, 0x04, 0x2a, 0xd8, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
  0x69, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53,
  0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
  0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x45,
  0x51, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52,
  0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x02,
  0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4c,
  0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41,
  0x4c, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f,
  0x4e, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x04,
  0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x47,
  0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45,
  0x51, 0x55, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52,
  0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x06,
  0x42, 0x37, 0x50, 0x01, 0x5a, 0x33, 0x63, 0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x6d,
  0x65, 0x64, 0x69, 0x61, 0x70, 0x63, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
  0x6e, 0x74, 0x73, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
  0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
}

var (
  file_requirements_proto_rawDescOnce sync.Once
  file_requirements_proto_rawDescData = file_requirements_proto_rawDesc
)

func file_requirements_proto_rawDescGZIP() []byte {
  file_requirements_proto_rawDescOnce.Do(func() {
    file_requirements_proto_rawDescData = protoimpl.X.CompressGZIP(file_requirements_proto_rawDescData)
  })
  return file_requirements_proto_rawDescData
}

var file_requirements_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_requirements_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_requirements_proto_goTypes = []interface{}{
  (Group)(0),                              // 0: android.media.performanceclass.requirements.Group
  (Comparison)(0),                         // 1: android.media.performanceclass.requirements.Comparison
  (*RequirementList)(nil),                 // 2: android.media.performanceclass.requirements.RequirementList
  (*Requirement)(nil),                     // 3: android.media.performanceclass.requirements.Requirement
  (*RequirementSpec)(nil),                 // 4: android.media.performanceclass.requirements.RequirementSpec
  (*RequiredMeasurement)(nil),             // 5: android.media.performanceclass.requirements.RequiredMeasurement
  (*RequiredValue)(nil),                   // 6: android.media.performanceclass.requirements.RequiredValue
  nil,                                     // 7: android.media.performanceclass.requirements.Requirement.SpecsEntry
  nil,                                     // 8: android.media.performanceclass.requirements.Requirement.MeasurementsEntry
  nil,                                     // 9: android.media.performanceclass.requirements.RequirementSpec.RequiredValuesEntry
  (mpc_go_proto.MediaPerformanceClass)(0), // 10: android.media.performanceclass.MediaPerformanceClass
}
var file_requirements_proto_depIdxs = []int32{
  3,  // 0: android.media.performanceclass.requirements.RequirementList.requirements:type_name -> android.media.performanceclass.requirements.Requirement
  0,  // 1: android.media.performanceclass.requirements.Requirement.group:type_name -> android.media.performanceclass.requirements.Group
  7,  // 2: android.media.performanceclass.requirements.Requirement.specs:type_name -> android.media.performanceclass.requirements.Requirement.SpecsEntry
  8,  // 3: android.media.performanceclass.requirements.Requirement.measurements:type_name -> android.media.performanceclass.requirements.Requirement.MeasurementsEntry
  10, // 4: android.media.performanceclass.requirements.RequirementSpec.mpc:type_name -> android.media.performanceclass.MediaPerformanceClass
  9,  // 5: android.media.performanceclass.requirements.RequirementSpec.required_values:type_name -> android.media.performanceclass.requirements.RequirementSpec.RequiredValuesEntry
  1,  // 6: android.media.performanceclass.requirements.RequiredValue.comparison:type_name -> android.media.performanceclass.requirements.Comparison
  4,  // 7: android.media.performanceclass.requirements.Requirement.SpecsEntry.value:type_name -> android.media.performanceclass.requirements.RequirementSpec
  5,  // 8: android.media.performanceclass.requirements.Requirement.MeasurementsEntry.value:type_name -> android.media.performanceclass.requirements.RequiredMeasurement
  6,  // 9: android.media.performanceclass.requirements.RequirementSpec.RequiredValuesEntry.value:type_name -> android.media.performanceclass.requirements.RequiredValue
  10, // [10:10] is the sub-list for method output_type
  10, // [10:10] is the sub-list for method input_type
  10, // [10:10] is the sub-list for extension type_name
  10, // [10:10] is the sub-list for extension extendee
  0,  // [0:10] is the sub-list for field type_name
}

func init() { file_requirements_proto_init() }
func file_requirements_proto_init() {
  if File_requirements_proto != nil {
    return
  }
  if !protoimpl.UnsafeEnabled {
    file_requirements_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
      switch v := v.(*RequirementList); i {
      case 0:
        return &v.state
      case 1:
        return &v.sizeCache
      case 2:
        return &v.unknownFields
      default:
        return nil
      }
    }
    file_requirements_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
      switch v := v.(*Requirement); i {
      case 0:
        return &v.state
      case 1:
        return &v.sizeCache
      case 2:
        return &v.unknownFields
      default:
        return nil
      }
    }
    file_requirements_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
      switch v := v.(*RequirementSpec); i {
      case 0:
        return &v.state
      case 1:
        return &v.sizeCache
      case 2:
        return &v.unknownFields
      default:
        return nil
      }
    }
    file_requirements_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
      switch v := v.(*RequiredMeasurement); i {
      case 0:
        return &v.state
      case 1:
        return &v.sizeCache
      case 2:
        return &v.unknownFields
      default:
        return nil
      }
    }
    file_requirements_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
      switch v := v.(*RequiredValue); i {
      case 0:
        return &v.state
      case 1:
        return &v.sizeCache
      case 2:
        return &v.unknownFields
      default:
        return nil
      }
    }
  }
  file_requirements_proto_msgTypes[4].OneofWrappers = []interface{}{
    (*RequiredValue_StringValue)(nil),
    (*RequiredValue_IntValue)(nil),
    (*RequiredValue_DoubleValue)(nil),
  }
  type x struct{}
  out := protoimpl.TypeBuilder{
    File: protoimpl.DescBuilder{
      GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
      RawDescriptor: file_requirements_proto_rawDesc,
      NumEnums:      2,
      NumMessages:   8,
      NumExtensions: 0,
      NumServices:   0,
    },
    GoTypes:           file_requirements_proto_goTypes,
    DependencyIndexes: file_requirements_proto_depIdxs,
    EnumInfos:         file_requirements_proto_enumTypes,
    MessageInfos:      file_requirements_proto_msgTypes,
  }.Build()
  File_requirements_proto = out.File
  file_requirements_proto_rawDesc = nil
  file_requirements_proto_goTypes = nil
  file_requirements_proto_depIdxs = nil
}
