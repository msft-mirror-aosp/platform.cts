/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package android.app.cts.fgstimeouttesthelper;

import android.annotation.NonNull;
import android.annotation.Nullable;
import android.content.ComponentName;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.SystemClock;

import com.android.internal.util.DataClass;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;

/**
 * Message class used in this test.
 *
 * CHECKSTYLE:OFF Generated code
 * codegen $ANDROID_BUILD_TOP/cts/tests/app/FgsTimeoutTest/FgsTimeoutTestHelper/src/android/app/cts/fgstimeouttesthelper/FgsTimeoutMessage.java
 */
@DataClass(
        genConstructor = false,
        genSetters = true,
        genToString = true,
        genAidl = false)
public class FgsTimeoutMessage implements Parcelable {
    public FgsTimeoutMessage() {
        mTimestamp = SystemClock.uptimeMillis();
    }

    final private long mTimestamp;

    // if set, it's an "ack" messasge.
    private boolean ack;

    @Nullable
    private String mFailureString;

    private int mFgsType;
    private int mStartCommandResult;
    private int mServiceStartId;
    @Nullable
    private ComponentName mComponentName;

    @Nullable
    private String mMethodName;

    /** If this is set, the receiver will call Context.startForegroundService() on mComponentName.*/
    private boolean mDoCallStartForegroundService;

    /** If this is set, the receiver will call Context.startService() on mComponentName.*/
    private boolean mDoCallStartService;

    /** If this is set, the receiver will call Service.startForeground() on mComponentName. */
    private boolean mDoCallStartForeground;

    /** If this is set, the receiver will call Service.stopForeground() on mComponentName. */
    private boolean mDoCallStopForeground;

    /** If this is set, the receiver will call Service.stopSelf() on mComponentName. */
    private boolean mDoCallStopSelf;

    /** If this is set, the helper process will kill itself. */
    private boolean mDoKillProcess;

    /**
     * Send by the helper app to the main test package, via CallProvider, to get the
     * currently running test information.
     */
    private boolean mCallGetTestInfo;

    /** Class name of an exception we expect in FgsTimeoutMessageReceiver */
    @Nullable
    private String mExpectedExceptionClass;

    @Nullable
    private String mActualExceptionClass;

    @Nullable
    private String mActualExceptionMessage;

    private long mLastTestStartUptime;
    private long mLastTestEndUptime;

    /**
     * Notification ID for FGS.
     */
    private int mNotificationId = 1;

    @NonNull
    public FgsTimeoutMessage setExpectedExceptionClass(Class<?> clazz) {
        mExpectedExceptionClass = clazz.getName();
        return this;
    }

    @Nullable
    public Class<?> getExpectedExceptionClass() throws ClassNotFoundException {
        if (mExpectedExceptionClass == null) {
            return null;
        }
        return Class.forName(mExpectedExceptionClass);
    }

    public void setException(Throwable e) {
        mActualExceptionClass = e.getClass().getName();
        mActualExceptionMessage = e.getMessage();

        try (StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);) {
            e.printStackTrace(pw);

            mFailureString = "Exception detected: \n" + sw.toString();
        } catch (IOException ex) {
            throw new RuntimeException("Unexpected exception", ex);
        }
    }



    // Code below generated by codegen v1.0.23.
    //
    // DO NOT MODIFY!
    // CHECKSTYLE:OFF Generated code
    //
    // To regenerate run:
    // $ codegen $ANDROID_BUILD_TOP/cts/tests/app/FgsTimeoutTest/FgsTimeoutTestHelper/src/android/app/cts/fgstimeouttesthelper/FgsTimeoutMessage.java
    //
    // To exclude the generated code from IntelliJ auto-formatting enable (one-time):
    //   Settings > Editor > Code Style > Formatter Control
    //@formatter:off


    @DataClass.Generated.Member
    /* package-private */ FgsTimeoutMessage(
            long timestamp,
            boolean ack,
            @Nullable String failureString,
            int fgsType,
            int startCommandResult,
            int serviceStartId,
            @Nullable ComponentName componentName,
            @Nullable String methodName,
            boolean doCallStartForegroundService,
            boolean doCallStartService,
            boolean doCallStartForeground,
            boolean doCallStopForeground,
            boolean doCallStopSelf,
            boolean doKillProcess,
            boolean callGetTestInfo,
            @Nullable String expectedExceptionClass,
            @Nullable String actualExceptionClass,
            @Nullable String actualExceptionMessage,
            long lastTestStartUptime,
            long lastTestEndUptime,
            int notificationId) {
        this.mTimestamp = timestamp;
        this.ack = ack;
        this.mFailureString = failureString;
        this.mFgsType = fgsType;
        this.mStartCommandResult = startCommandResult;
        this.mServiceStartId = serviceStartId;
        this.mComponentName = componentName;
        this.mMethodName = methodName;
        this.mDoCallStartForegroundService = doCallStartForegroundService;
        this.mDoCallStartService = doCallStartService;
        this.mDoCallStartForeground = doCallStartForeground;
        this.mDoCallStopForeground = doCallStopForeground;
        this.mDoCallStopSelf = doCallStopSelf;
        this.mDoKillProcess = doKillProcess;
        this.mCallGetTestInfo = callGetTestInfo;
        this.mExpectedExceptionClass = expectedExceptionClass;
        this.mActualExceptionClass = actualExceptionClass;
        this.mActualExceptionMessage = actualExceptionMessage;
        this.mLastTestStartUptime = lastTestStartUptime;
        this.mLastTestEndUptime = lastTestEndUptime;
        this.mNotificationId = notificationId;

        // onConstructed(); // You can define this method to get a callback
    }

    @DataClass.Generated.Member
    public long getTimestamp() {
        return mTimestamp;
    }

    @DataClass.Generated.Member
    public boolean isAck() {
        return ack;
    }

    @DataClass.Generated.Member
    public @Nullable String getFailureString() {
        return mFailureString;
    }

    @DataClass.Generated.Member
    public int getFgsType() {
        return mFgsType;
    }

    @DataClass.Generated.Member
    public int getStartCommandResult() {
        return mStartCommandResult;
    }

    @DataClass.Generated.Member
    public int getServiceStartId() {
        return mServiceStartId;
    }

    @DataClass.Generated.Member
    public @Nullable ComponentName getComponentName() {
        return mComponentName;
    }

    @DataClass.Generated.Member
    public @Nullable String getMethodName() {
        return mMethodName;
    }

    /**
     * If this is set, the receiver will call Context.startForegroundService() on mComponentName.
     */
    @DataClass.Generated.Member
    public boolean isDoCallStartForegroundService() {
        return mDoCallStartForegroundService;
    }

    /**
     * If this is set, the receiver will call Context.startService() on mComponentName.
     */
    @DataClass.Generated.Member
    public boolean isDoCallStartService() {
        return mDoCallStartService;
    }

    /**
     * If this is set, the receiver will call Service.startForeground() on mComponentName.
     */
    @DataClass.Generated.Member
    public boolean isDoCallStartForeground() {
        return mDoCallStartForeground;
    }

    /**
     * If this is set, the receiver will call Service.stopForeground() on mComponentName.
     */
    @DataClass.Generated.Member
    public boolean isDoCallStopForeground() {
        return mDoCallStopForeground;
    }

    /**
     * If this is set, the receiver will call Service.stopSelf() on mComponentName.
     */
    @DataClass.Generated.Member
    public boolean isDoCallStopSelf() {
        return mDoCallStopSelf;
    }

    /**
     * If this is set, the helper process will kill itself.
     */
    @DataClass.Generated.Member
    public boolean isDoKillProcess() {
        return mDoKillProcess;
    }

    /**
     * Send by the helper app to the main test package, via CallProvider, to get the
     * currently running test information.
     */
    @DataClass.Generated.Member
    public boolean isCallGetTestInfo() {
        return mCallGetTestInfo;
    }

    @DataClass.Generated.Member
    public @Nullable String getActualExceptionClass() {
        return mActualExceptionClass;
    }

    @DataClass.Generated.Member
    public @Nullable String getActualExceptionMessage() {
        return mActualExceptionMessage;
    }

    @DataClass.Generated.Member
    public long getLastTestStartUptime() {
        return mLastTestStartUptime;
    }

    @DataClass.Generated.Member
    public long getLastTestEndUptime() {
        return mLastTestEndUptime;
    }

    /**
     * Notification ID for FGS.
     */
    @DataClass.Generated.Member
    public int getNotificationId() {
        return mNotificationId;
    }

    @DataClass.Generated.Member
    public @NonNull FgsTimeoutMessage setAck( boolean value) {
        ack = value;
        return this;
    }

    @DataClass.Generated.Member
    public @NonNull FgsTimeoutMessage setFailureString(@NonNull String value) {
        mFailureString = value;
        return this;
    }

    @DataClass.Generated.Member
    public @NonNull FgsTimeoutMessage setFgsType( int value) {
        mFgsType = value;
        return this;
    }

    @DataClass.Generated.Member
    public @NonNull FgsTimeoutMessage setStartCommandResult( int value) {
        mStartCommandResult = value;
        return this;
    }

    @DataClass.Generated.Member
    public @NonNull FgsTimeoutMessage setServiceStartId( int value) {
        mServiceStartId = value;
        return this;
    }

    @DataClass.Generated.Member
    public @NonNull FgsTimeoutMessage setComponentName(@NonNull ComponentName value) {
        mComponentName = value;
        return this;
    }

    @DataClass.Generated.Member
    public @NonNull FgsTimeoutMessage setMethodName(@NonNull String value) {
        mMethodName = value;
        return this;
    }

    /**
     * If this is set, the receiver will call Context.startForegroundService() on mComponentName.
     */
    @DataClass.Generated.Member
    public @NonNull FgsTimeoutMessage setDoCallStartForegroundService( boolean value) {
        mDoCallStartForegroundService = value;
        return this;
    }

    /**
     * If this is set, the receiver will call Context.startService() on mComponentName.
     */
    @DataClass.Generated.Member
    public @NonNull FgsTimeoutMessage setDoCallStartService( boolean value) {
        mDoCallStartService = value;
        return this;
    }

    /**
     * If this is set, the receiver will call Service.startForeground() on mComponentName.
     */
    @DataClass.Generated.Member
    public @NonNull FgsTimeoutMessage setDoCallStartForeground( boolean value) {
        mDoCallStartForeground = value;
        return this;
    }

    /**
     * If this is set, the receiver will call Service.stopForeground() on mComponentName.
     */
    @DataClass.Generated.Member
    public @NonNull FgsTimeoutMessage setDoCallStopForeground( boolean value) {
        mDoCallStopForeground = value;
        return this;
    }

    /**
     * If this is set, the receiver will call Service.stopSelf() on mComponentName.
     */
    @DataClass.Generated.Member
    public @NonNull FgsTimeoutMessage setDoCallStopSelf( boolean value) {
        mDoCallStopSelf = value;
        return this;
    }

    /**
     * If this is set, the helper process will kill itself.
     */
    @DataClass.Generated.Member
    public @NonNull FgsTimeoutMessage setDoKillProcess( boolean value) {
        mDoKillProcess = value;
        return this;
    }

    /**
     * Send by the helper app to the main test package, via CallProvider, to get the
     * currently running test information.
     */
    @DataClass.Generated.Member
    public @NonNull FgsTimeoutMessage setCallGetTestInfo( boolean value) {
        mCallGetTestInfo = value;
        return this;
    }

    /**
     * Class name of an exception we expect in FgsTimeoutMessageReceiver
     */
    @DataClass.Generated.Member
    public @NonNull FgsTimeoutMessage setExpectedExceptionClass(@NonNull String value) {
        mExpectedExceptionClass = value;
        return this;
    }

    @DataClass.Generated.Member
    public @NonNull FgsTimeoutMessage setActualExceptionClass(@NonNull String value) {
        mActualExceptionClass = value;
        return this;
    }

    @DataClass.Generated.Member
    public @NonNull FgsTimeoutMessage setActualExceptionMessage(@NonNull String value) {
        mActualExceptionMessage = value;
        return this;
    }

    @DataClass.Generated.Member
    public @NonNull FgsTimeoutMessage setLastTestStartUptime( long value) {
        mLastTestStartUptime = value;
        return this;
    }

    @DataClass.Generated.Member
    public @NonNull FgsTimeoutMessage setLastTestEndUptime( long value) {
        mLastTestEndUptime = value;
        return this;
    }

    /**
     * Notification ID for FGS.
     */
    @DataClass.Generated.Member
    public @NonNull FgsTimeoutMessage setNotificationId( int value) {
        mNotificationId = value;
        return this;
    }

    @Override
    @DataClass.Generated.Member
    public String toString() {
        // You can override field toString logic by defining methods like:
        // String fieldNameToString() { ... }

        return "FgsTimeoutMessage { " +
                "timestamp = " + mTimestamp + ", " +
                "ack = " + ack + ", " +
                "failureString = " + mFailureString + ", " +
                "fgsType = " + mFgsType + ", " +
                "startCommandResult = " + mStartCommandResult + ", " +
                "serviceStartId = " + mServiceStartId + ", " +
                "componentName = " + mComponentName + ", " +
                "methodName = " + mMethodName + ", " +
                "doCallStartForegroundService = " + mDoCallStartForegroundService + ", " +
                "doCallStartService = " + mDoCallStartService + ", " +
                "doCallStartForeground = " + mDoCallStartForeground + ", " +
                "doCallStopForeground = " + mDoCallStopForeground + ", " +
                "doCallStopSelf = " + mDoCallStopSelf + ", " +
                "doKillProcess = " + mDoKillProcess + ", " +
                "callGetTestInfo = " + mCallGetTestInfo + ", " +
                "expectedExceptionClass = " + mExpectedExceptionClass + ", " +
                "actualExceptionClass = " + mActualExceptionClass + ", " +
                "actualExceptionMessage = " + mActualExceptionMessage + ", " +
                "lastTestStartUptime = " + mLastTestStartUptime + ", " +
                "lastTestEndUptime = " + mLastTestEndUptime + ", " +
                "notificationId = " + mNotificationId +
        " }";
    }

    @Override
    @DataClass.Generated.Member
    public void writeToParcel(@NonNull Parcel dest, int flags) {
        // You can override field parcelling by defining methods like:
        // void parcelFieldName(Parcel dest, int flags) { ... }

        long flg = 0;
        if (ack) flg |= 0x2;
        if (mDoCallStartForegroundService) flg |= 0x100;
        if (mDoCallStartService) flg |= 0x200;
        if (mDoCallStartForeground) flg |= 0x400;
        if (mDoCallStopForeground) flg |= 0x800;
        if (mDoCallStopSelf) flg |= 0x4000;
        if (mDoKillProcess) flg |= 0x8000;
        if (mCallGetTestInfo) flg |= 0x40000;
        if (mFailureString != null) flg |= 0x4;
        if (mComponentName != null) flg |= 0x40;
        if (mMethodName != null) flg |= 0x80;
        if (mExpectedExceptionClass != null) flg |= 0x80000;
        if (mActualExceptionClass != null) flg |= 0x100000;
        if (mActualExceptionMessage != null) flg |= 0x200000;
        dest.writeLong(flg);
        dest.writeLong(mTimestamp);
        if (mFailureString != null) dest.writeString(mFailureString);
        dest.writeInt(mFgsType);
        dest.writeInt(mStartCommandResult);
        dest.writeInt(mServiceStartId);
        if (mComponentName != null) dest.writeTypedObject(mComponentName, flags);
        if (mMethodName != null) dest.writeString(mMethodName);
        if (mExpectedExceptionClass != null) dest.writeString(mExpectedExceptionClass);
        if (mActualExceptionClass != null) dest.writeString(mActualExceptionClass);
        if (mActualExceptionMessage != null) dest.writeString(mActualExceptionMessage);
        dest.writeLong(mLastTestStartUptime);
        dest.writeLong(mLastTestEndUptime);
        dest.writeInt(mNotificationId);
    }

    @Override
    @DataClass.Generated.Member
    public int describeContents() { return 0; }

    /** @hide */
    @SuppressWarnings({"unchecked", "RedundantCast"})
    @DataClass.Generated.Member
    protected FgsTimeoutMessage(@NonNull Parcel in) {
        // You can override field unparcelling by defining methods like:
        // static FieldType unparcelFieldName(Parcel in) { ... }

        long flg = in.readLong();
        boolean _ack = (flg & 0x2) != 0;
        boolean doCallStartForegroundService = (flg & 0x100) != 0;
        boolean doCallStartService = (flg & 0x200) != 0;
        boolean doCallStartForeground = (flg & 0x400) != 0;
        boolean doCallStopForeground = (flg & 0x800) != 0;
        boolean doCallStopSelf = (flg & 0x4000) != 0;
        boolean doKillProcess = (flg & 0x8000) != 0;
        boolean callGetTestInfo = (flg & 0x40000) != 0;
        long timestamp = in.readLong();
        String failureString = (flg & 0x4) == 0 ? null : in.readString();
        int fgsType = in.readInt();
        int startCommandResult = in.readInt();
        int serviceStartId = in.readInt();
        ComponentName componentName = (flg & 0x40) == 0 ? null : (ComponentName) in.readTypedObject(ComponentName.CREATOR);
        String methodName = (flg & 0x80) == 0 ? null : in.readString();
        String expectedExceptionClass = (flg & 0x80000) == 0 ? null : in.readString();
        String actualExceptionClass = (flg & 0x100000) == 0 ? null : in.readString();
        String actualExceptionMessage = (flg & 0x200000) == 0 ? null : in.readString();
        long lastTestStartUptime = in.readLong();
        long lastTestEndUptime = in.readLong();
        int notificationId = in.readInt();

        this.mTimestamp = timestamp;
        this.ack = _ack;
        this.mFailureString = failureString;
        this.mFgsType = fgsType;
        this.mStartCommandResult = startCommandResult;
        this.mServiceStartId = serviceStartId;
        this.mComponentName = componentName;
        this.mMethodName = methodName;
        this.mDoCallStartForegroundService = doCallStartForegroundService;
        this.mDoCallStartService = doCallStartService;
        this.mDoCallStartForeground = doCallStartForeground;
        this.mDoCallStopForeground = doCallStopForeground;
        this.mDoCallStopSelf = doCallStopSelf;
        this.mDoKillProcess = doKillProcess;
        this.mCallGetTestInfo = callGetTestInfo;
        this.mExpectedExceptionClass = expectedExceptionClass;
        this.mActualExceptionClass = actualExceptionClass;
        this.mActualExceptionMessage = actualExceptionMessage;
        this.mLastTestStartUptime = lastTestStartUptime;
        this.mLastTestEndUptime = lastTestEndUptime;
        this.mNotificationId = notificationId;

        // onConstructed(); // You can define this method to get a callback
    }

    @DataClass.Generated.Member
    public static final @NonNull Parcelable.Creator<FgsTimeoutMessage> CREATOR
            = new Parcelable.Creator<FgsTimeoutMessage>() {
        @Override
        public FgsTimeoutMessage[] newArray(int size) {
            return new FgsTimeoutMessage[size];
        }

        @Override
        public FgsTimeoutMessage createFromParcel(@NonNull Parcel in) {
            return new FgsTimeoutMessage(in);
        }
    };

    /**
     * A builder for {@link FgsTimeoutMessage}
     */
    @SuppressWarnings("WeakerAccess")
    @DataClass.Generated.Member
    public static class Builder {

        private long mTimestamp;
        private boolean ack;
        private @Nullable String mFailureString;
        private int mFgsType;
        private int mStartCommandResult;
        private int mServiceStartId;
        private @Nullable ComponentName mComponentName;
        private @Nullable String mMethodName;
        private boolean mDoCallStartForegroundService;
        private boolean mDoCallStartService;
        private boolean mDoCallStartForeground;
        private boolean mDoCallStopForeground;
        private boolean mDoCallStopSelf;
        private boolean mDoKillProcess;
        private boolean mCallGetTestInfo;
        private @Nullable String mExpectedExceptionClass;
        private @Nullable String mActualExceptionClass;
        private @Nullable String mActualExceptionMessage;
        private long mLastTestStartUptime;
        private long mLastTestEndUptime;
        private int mNotificationId;

        private long mBuilderFieldsSet = 0L;

        /**
         * Creates a new Builder.
         *
         * @param doCallStartForegroundService
         *   If this is set, the receiver will call Context.startForegroundService() on mComponentName.
         * @param doCallStartService
         *   If this is set, the receiver will call Context.startService() on mComponentName.
         * @param doCallStartForeground
         *   If this is set, the receiver will call Service.startForeground() on mComponentName.
         * @param doCallStopForeground
         *   If this is set, the receiver will call Service.stopForeground() on mComponentName.
         * @param doCallStopSelf
         *   If this is set, the receiver will call Service.stopSelf() on mComponentName.
         * @param doKillProcess
         *   If this is set, the helper process will kill itself.
         * @param callGetTestInfo
         *   Send by the helper app to the main test package, via CallProvider, to get the
         *   currently running test information.
         * @param expectedExceptionClass
         *   Class name of an exception we expect in FgsTimeoutMessageReceiver
         */
        public Builder(
                long timestamp,
                boolean _ack,
                @Nullable String failureString,
                int fgsType,
                int startCommandResult,
                int serviceStartId,
                @Nullable ComponentName componentName,
                @Nullable String methodName,
                boolean doCallStartForegroundService,
                boolean doCallStartService,
                boolean doCallStartForeground,
                boolean doCallStopForeground,
                boolean doCallStopSelf,
                boolean doKillProcess,
                boolean callGetTestInfo,
                @Nullable String expectedExceptionClass,
                @Nullable String actualExceptionClass,
                @Nullable String actualExceptionMessage,
                long lastTestStartUptime,
                long lastTestEndUptime) {
            mTimestamp = timestamp;
            ack = _ack;
            mFailureString = failureString;
            mFgsType = fgsType;
            mStartCommandResult = startCommandResult;
            mServiceStartId = serviceStartId;
            mComponentName = componentName;
            mMethodName = methodName;
            mDoCallStartForegroundService = doCallStartForegroundService;
            mDoCallStartService = doCallStartService;
            mDoCallStartForeground = doCallStartForeground;
            mDoCallStopForeground = doCallStopForeground;
            mDoCallStopSelf = doCallStopSelf;
            mDoKillProcess = doKillProcess;
            mCallGetTestInfo = callGetTestInfo;
            mExpectedExceptionClass = expectedExceptionClass;
            mActualExceptionClass = actualExceptionClass;
            mActualExceptionMessage = actualExceptionMessage;
            mLastTestStartUptime = lastTestStartUptime;
            mLastTestEndUptime = lastTestEndUptime;
        }

        @DataClass.Generated.Member
        public @NonNull Builder setTimestamp(long value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x1;
            mTimestamp = value;
            return this;
        }

        @DataClass.Generated.Member
        public @NonNull Builder setAck(boolean value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x2;
            ack = value;
            return this;
        }

        @DataClass.Generated.Member
        public @NonNull Builder setFailureString(@NonNull String value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x4;
            mFailureString = value;
            return this;
        }

        @DataClass.Generated.Member
        public @NonNull Builder setFgsType(int value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x8;
            mFgsType = value;
            return this;
        }

        @DataClass.Generated.Member
        public @NonNull Builder setStartCommandResult(int value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x10;
            mStartCommandResult = value;
            return this;
        }

        @DataClass.Generated.Member
        public @NonNull Builder setServiceStartId(int value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x20;
            mServiceStartId = value;
            return this;
        }

        @DataClass.Generated.Member
        public @NonNull Builder setComponentName(@NonNull ComponentName value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x40;
            mComponentName = value;
            return this;
        }

        @DataClass.Generated.Member
        public @NonNull Builder setMethodName(@NonNull String value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x80;
            mMethodName = value;
            return this;
        }

        /**
         * If this is set, the receiver will call Context.startForegroundService() on mComponentName.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setDoCallStartForegroundService(boolean value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x100;
            mDoCallStartForegroundService = value;
            return this;
        }

        /**
         * If this is set, the receiver will call Context.startService() on mComponentName.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setDoCallStartService(boolean value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x200;
            mDoCallStartService = value;
            return this;
        }

        /**
         * If this is set, the receiver will call Service.startForeground() on mComponentName.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setDoCallStartForeground(boolean value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x400;
            mDoCallStartForeground = value;
            return this;
        }

        /**
         * If this is set, the receiver will call Service.stopForeground() on mComponentName.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setDoCallStopForeground(boolean value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x800;
            mDoCallStopForeground = value;
            return this;
        }

        /**
         * If this is set, the receiver will call Service.stopSelf() on mComponentName.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setDoCallStopSelf(boolean value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x4000;
            mDoCallStopSelf = value;
            return this;
        }

        /**
         * If this is set, the helper process will kill itself.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setDoKillProcess(boolean value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x8000;
            mDoKillProcess = value;
            return this;
        }

        /**
         * Send by the helper app to the main test package, via CallProvider, to get the
         * currently running test information.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setCallGetTestInfo(boolean value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x40000;
            mCallGetTestInfo = value;
            return this;
        }

        /**
         * Class name of an exception we expect in FgsTimeoutMessageReceiver
         */
        @DataClass.Generated.Member
        public @NonNull Builder setExpectedExceptionClass(@NonNull String value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x80000;
            mExpectedExceptionClass = value;
            return this;
        }

        @DataClass.Generated.Member
        public @NonNull Builder setActualExceptionClass(@NonNull String value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x100000;
            mActualExceptionClass = value;
            return this;
        }

        @DataClass.Generated.Member
        public @NonNull Builder setActualExceptionMessage(@NonNull String value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x200000;
            mActualExceptionMessage = value;
            return this;
        }

        @DataClass.Generated.Member
        public @NonNull Builder setLastTestStartUptime(long value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x400000;
            mLastTestStartUptime = value;
            return this;
        }

        @DataClass.Generated.Member
        public @NonNull Builder setLastTestEndUptime(long value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x800000;
            mLastTestEndUptime = value;
            return this;
        }

        /**
         * Notification ID for FGS.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setNotificationId(int value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x1000000;
            mNotificationId = value;
            return this;
        }

        /** Builds the instance. This builder should not be touched after calling this! */
        public @NonNull FgsTimeoutMessage build() {
            checkNotUsed();
            mBuilderFieldsSet |= 0x2000000; // Mark builder used

            if ((mBuilderFieldsSet & 0x1000000) == 0) {
                mNotificationId = 1;
            }
            FgsTimeoutMessage o = new FgsTimeoutMessage(
                    mTimestamp,
                    ack,
                    mFailureString,
                    mFgsType,
                    mStartCommandResult,
                    mServiceStartId,
                    mComponentName,
                    mMethodName,
                    mDoCallStartForegroundService,
                    mDoCallStartService,
                    mDoCallStartForeground,
                    mDoCallStopForeground,
                    mDoCallStopSelf,
                    mDoKillProcess,
                    mCallGetTestInfo,
                    mExpectedExceptionClass,
                    mActualExceptionClass,
                    mActualExceptionMessage,
                    mLastTestStartUptime,
                    mLastTestEndUptime,
                    mNotificationId);
            return o;
        }

        private void checkNotUsed() {
            if ((mBuilderFieldsSet & 0x2000000) != 0) {
                throw new IllegalStateException(
                        "This Builder should not be reused. Use a new Builder instance instead");
            }
        }
    }

    @DataClass.Generated(
            time = 1678225468346L,
            codegenVersion = "1.0.23",
            sourceFile = "cts/tests/app/FgsTimeoutTest/FgsTimeoutTestHelper/src/android/app/cts/fgstimeouttesthelper/FgsTimeoutMessage.java",
            inputSignatures = "final private  long mTimestamp\nprivate  boolean ack\nprivate @android.annotation.Nullable java.lang.String mFailureString\nprivate  int mFgsType\nprivate  int mStartCommandResult\nprivate  int mServiceStartId\nprivate @android.annotation.Nullable android.content.ComponentName mComponentName\nprivate @android.annotation.Nullable java.lang.String mMethodName\nprivate  boolean mDoCallStartForegroundService\nprivate  boolean mDoCallStartService\nprivate  boolean mDoCallStartForeground\nprivate  boolean mDoCallStopForeground\nprivate  boolean mDoCallStopSelf\nprivate  boolean mDoKillProcess\nprivate  boolean mCallGetTestInfo\nprivate @android.annotation.Nullable java.lang.String mExpectedExceptionClass\nprivate @android.annotation.Nullable java.lang.String mActualExceptionClass\nprivate @android.annotation.Nullable java.lang.String mActualExceptionMessage\nprivate  long mLastTestStartUptime\nprivate  long mLastTestEndUptime\nprivate  int mNotificationId\npublic @android.annotation.NonNull android.app.cts.fgstimeouttesthelper.FgsTimeoutMessage setExpectedExceptionClass(java.lang.Class<?>)\npublic @android.annotation.Nullable java.lang.Class<?> getExpectedExceptionClass()\npublic  void setException(java.lang.Throwable)\nclass FgsTimeoutMessage extends java.lang.Object implements [android.os.Parcelable]\n@com.android.internal.util.DataClass(genConstructor=false, genSetters=true, genToString=true, genAidl=false)")
    @Deprecated
    private void __metadata() {}


    //@formatter:on
    // End of generated code

}
