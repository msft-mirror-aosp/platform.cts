/*
 * Copyright (C) 2013 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License
 */

package android.provider.cts.contacts;

import android.accounts.Account;
import android.content.ContentResolver;
import android.content.ContentUris;
import android.content.ContentValues;
import android.database.Cursor;
import android.net.Uri;
import android.provider.ContactsContract;

import java.util.List;

/**
 * Convenience methods for operating on the RawContacts table.
 */
public class RawContactUtil {

    private static final Uri URI = ContactsContract.RawContacts.CONTENT_URI;

    public static int update(ContentResolver resolver, long rawContactId,
            ContentValues values) {
        Uri uri = ContentUris.withAppendedId(URI, rawContactId);
        return resolver.update(uri, values, null, null);
    }

    /**
     * Updates the account associated with a raw contact in the Contacts Provider.
     *
     * @param resolver The {@link ContentResolver} to use for the update.
     * @param rawContactId The ID of the raw contact to update.
     * @param accountUpdateTo The new {@link Account} to associate with the raw contact.
     * @return The number of rows updated.
     */
    public static int updateRawContactAccount(ContentResolver resolver, long rawContactId,
            Account accountUpdateTo) {
        ContentValues values = new ContentValues();
        if (accountUpdateTo == null) {
            // Using null account: put the null account name and account type to the content values.
            values.put(ContactsContract.RawContacts.ACCOUNT_NAME, (String) null);
            values.put(ContactsContract.RawContacts.ACCOUNT_TYPE, (String) null);
        } else {
            values.put(ContactsContract.RawContacts.ACCOUNT_NAME, accountUpdateTo.name);
            values.put(ContactsContract.RawContacts.ACCOUNT_TYPE, accountUpdateTo.type);
        }
        return update(resolver, rawContactId, values);
    }

    public static long createRawContactWithName(ContentResolver resolver, Account account,
            String name) {
        Long rawContactId = insertRawContactIgnoringNullAccount(resolver, account);
        DataUtil.insertName(resolver, rawContactId, name);
        return rawContactId;
    }

    public static long createRawContactWithAutoGeneratedName(ContentResolver resolver,
            Account account) {
        Long rawContactId = insertRawContactIgnoringNullAccount(resolver, account);
        DataUtil.insertAutoGeneratedName(resolver, rawContactId);
        return rawContactId;
    }

    /**
     * Inserts a raw contact into the Contacts Provider, ignoring the provided account if it is
     * null.
     *
     * @param resolver The {@link ContentResolver} to use for the insertion.
     * @param account  The {@link Account} to associate with the raw contact, or null to insert
     *                 without an account.
     * @return The ID of the newly inserted raw contact.
     */
    public static long insertRawContactIgnoringNullAccount(ContentResolver resolver,
            Account account) {
        ContentValues values = new ContentValues();
        if (account != null) {
            values.put(ContactsContract.RawContacts.ACCOUNT_NAME, account.name);
            values.put(ContactsContract.RawContacts.ACCOUNT_TYPE, account.type);
        }
        Uri uri = resolver.insert(URI, values);
        return ContentUris.parseId(uri);
    }

    /**
     * Inserts a raw contact into the Contacts Provider, using null values for the account if the
     * provided account is null.
     *
     * @param resolver The {@link ContentResolver} to use for the insertion.
     * @param account The {@link Account} to associate with the raw contact, or null to insert
     *                with null account values.
     * @return The ID of the newly inserted raw contact.
     */
    public static long insertRawContactUsingNullAccount(ContentResolver resolver, Account account) {
        ContentValues values = new ContentValues();
        if (account == null) {
            // Using null account: put the null account name and account type to the content values.
            values.put(ContactsContract.RawContacts.ACCOUNT_NAME, (String) null);
            values.put(ContactsContract.RawContacts.ACCOUNT_TYPE, (String) null);
        } else {
            values.put(ContactsContract.RawContacts.ACCOUNT_NAME, account.name);
            values.put(ContactsContract.RawContacts.ACCOUNT_TYPE, account.type);
        }
        Uri uri = resolver.insert(URI, values);
        return ContentUris.parseId(uri);
    }

    public static String[] queryByRawContactId(ContentResolver resolver,
            long rawContactId, String[] projection) {
        Uri uri = ContentUris.withAppendedId(URI, rawContactId);
        Cursor cursor = resolver.query(uri, projection, null, null, null);
        return CommonDatabaseUtils.singleRecordToArray(cursor);
    }

    /**
     * Returns a list of raw contact records.
     *
     * @return A list of records.  Where each record is represented as an array of strings.
     */
    public static List<String[]> queryByContactId(ContentResolver resolver, long contactId,
            String[] projection) {
        Uri uri = ContentUris.withAppendedId(URI, contactId);
        Cursor cursor = resolver.query(uri, projection, null, null, null);
        return CommonDatabaseUtils.multiRecordToArray(cursor);
    }

    public static void delete(ContentResolver resolver, long rawContactId,
            boolean isSyncAdapter) {
        Uri uri = ContentUris.withAppendedId(URI, rawContactId)
                .buildUpon()
                .appendQueryParameter(ContactsContract.CALLER_IS_SYNCADAPTER, isSyncAdapter + "")
                .build();
        resolver.delete(uri, null, null);
    }

    public static long queryContactIdByRawContactId(ContentResolver resolver, long rawContactid) {
        String[] projection = new String[]{
                ContactsContract.RawContacts.CONTACT_ID
        };
        String[] result = RawContactUtil.queryByRawContactId(resolver, rawContactid,
                projection);
        if (result == null) {
            return CommonDatabaseUtils.NOT_FOUND;
        }
        return Long.parseLong(result[0]);
    }

    public static boolean rawContactExistsById(ContentResolver resolver, long rawContactid) {
        long contactId = queryContactIdByRawContactId(resolver, rawContactid);
        return contactId != CommonDatabaseUtils.NOT_FOUND;
    }
}
