/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Top level driver for models and examples generated by test_generator.py

#include <android/log.h>
#include <jni.h>

#include <NeuralNetworksWrapper.h>

#include <cmath>
#include <functional>
#include <iostream>
#include <map>
#include <sstream>

#define LOG_TAG "nnapi"
#define LOGV(...) __android_log_print(ANDROID_LOG_VERBOSE, LOG_TAG, __VA_ARGS__)

using namespace android::nn::wrapper;
namespace GeneratedTest {
template <typename T>
class Example {
   public:
    typedef T ElementType;
    typedef std::pair<std::map<int, std::vector<T>>,
                      std::map<int, std::vector<T>>>
        ExampleType;

    static bool Execute(std::function<void(Model*)> create_model,
                        std::vector<ExampleType>& examples,
                        std::function<bool(const T, const T)> compare) {
        android::nn::wrapper::Initialize();
        Model model;
        create_model(&model);

        int example_no = 1;
        bool error = false;

        for (auto& example : examples) {
            Request request(&model);

            // Go through all inputs
            for (auto& i : example.first) {
                std::vector<T>& input = i.second;
                request.setInput(i.first, (const void*)input.data(),
                                 input.size() * sizeof(T));
            }

            std::map<int, std::vector<T>> test_outputs;

            if (example.second.size() != 1) {
                LOGV("nnapi: output > 1 probably will not work");
            }
            int output_no = 0;
            for (auto& i : example.second) {
                std::vector<T>& output = i.second;
                test_outputs[i.first].resize(output.size());
                std::vector<T>& test_output = test_outputs[i.first];
                request.setOutput(output_no++, (void*)test_output.data(),
                                  test_output.size() * sizeof(T));
            }
            Result r = request.compute();
            if (r != Result::NO_ERROR)
                LOGV("Request was not completed normally");
            bool mismatch = false;
            for (auto& i : example.second) {
                const std::vector<T>& test = test_outputs[i.first];
                const std::vector<T>& golden = i.second;
                for (unsigned i = 0; i < golden.size(); i++) {
                    if (compare(golden[i], test[i])) {
                        std::stringstream ss;
                        ss << " output[" << i << "] = " << (float)test[i]
                           << " (should be " << (float)golden[i] << ")\n";
                        LOGV("%s", ss.str().c_str());
                        error = error || true;
                        mismatch = mismatch || true;
                    }
                }
            }
            if (mismatch) {
                std::stringstream ss;
                ss << "Example: " << example_no++;
                ss << " failed\n";
                LOGV("%s", ss.str().c_str());
            }
        }

        android::nn::wrapper::Shutdown();
        return error;
    }
};
};  // namespace GeneratedTest

// Float32 examples
typedef GeneratedTest::Example<float>::ExampleType Example;
// Quantized examples
typedef GeneratedTest::Example<uint8_t>::ExampleType QExample;
#define assert(x)
namespace avg_pool_quant8 {
std::vector<QExample> examples = {
// Generated avg_pool quantized test
#include "generated/examples/avg_pool_quant8_tests.example.cc"
};
// Generated model constructor
#include "generated/models/avg_pool_quant8.model.cpp"
}  // namespace avg_pool_quant8

namespace conv_1_h3_w2_SAME {
std::vector<Example> examples = {
// Converted examples
#include "generated/examples/conv_1_h3_w2_SAME_tests.example.cc"
};
// Generated model constructor
#include "generated/models/conv_1_h3_w2_SAME.model.cpp"
}  // namespace conv_1_h3_w2_SAME

namespace mobilenet {
std::vector<Example> examples = {
// Converted examples
#include "generated/examples/mobilenet_224_gender_basic_fixed_tests.example.cc"
};
// Generated model constructor
#include "generated/models/mobilenet_224_gender_basic_fixed.model.cpp"
}  // namespace mobilenet

namespace {
bool QExecute(std::function<void(Model*)> create_model,
              std::vector<QExample>& examples) {
    return GeneratedTest::Example<uint8_t>::Execute(
        create_model, examples,
        [](uint8_t golden, uint8_t test) { return golden != test; });
}

bool Execute(std::function<void(Model*)> create_model,
             std::vector<Example>& examples) {
    return GeneratedTest::Example<float>::Execute(
        create_model, examples, [](float golden, float test) {
            return std::fabs(golden - test) > 1.5e-5f;
        });
}

}  // namespace
extern "C" JNIEXPORT jboolean JNICALL
Java_android_cts_nnapi_NNAPIGeneratedTests_avgPoolQuant8(JNIEnv*, jclass) {
    return QExecute(avg_pool_quant8::CreateModel, avg_pool_quant8::examples);
}

extern "C" JNIEXPORT jboolean JNICALL
Java_android_cts_nnapi_NNAPIGeneratedTests_conv1H3W2Same(JNIEnv*, jclass) {
    return Execute(conv_1_h3_w2_SAME::CreateModel, conv_1_h3_w2_SAME::examples);
}

extern "C" JNIEXPORT jboolean JNICALL
Java_android_cts_nnapi_NNAPIGeneratedTests_mobileNet(JNIEnv*, jclass) {
    return Execute(mobilenet::CreateModel, mobilenet::examples);
}
